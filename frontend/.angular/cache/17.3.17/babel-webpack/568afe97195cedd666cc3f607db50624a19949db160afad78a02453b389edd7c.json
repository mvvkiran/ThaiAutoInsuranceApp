{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { AuthGuard } from './core/guards/auth.guard';\nimport { RoleGuard } from './core/guards/role.guard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [\n// Default route - redirect to dashboard if authenticated, login if not\n{\n  path: '',\n  redirectTo: '/dashboard',\n  pathMatch: 'full'\n},\n// Authentication routes (lazy loaded)\n{\n  path: 'auth',\n  loadChildren: () => import('./features/auth/auth.module').then(m => m.AuthModule)\n},\n// Dashboard route (protected)\n{\n  path: 'dashboard',\n  loadChildren: () => import('./features/dashboard/dashboard.module').then(m => m.DashboardModule),\n  canActivate: [AuthGuard]\n},\n// Customer routes (protected)\n{\n  path: 'customer',\n  loadChildren: () => import('./features/customer/customer.module').then(m => m.CustomerModule),\n  canActivate: [AuthGuard]\n},\n// Policy routes (protected)\n{\n  path: 'policies',\n  loadChildren: () => import('./features/policy/policy.module').then(m => m.PolicyModule),\n  canActivate: [AuthGuard]\n},\n// Claims routes (protected)\n{\n  path: 'claims',\n  loadChildren: () => import('./features/claims/claims.module').then(m => m.ClaimsModule),\n  canActivate: [AuthGuard]\n},\n// Admin routes (protected with role check)\n{\n  path: 'admin',\n  loadChildren: () => import('./features/admin/admin.module').then(m => m.AdminModule),\n  canActivate: [AuthGuard, RoleGuard],\n  data: {\n    roles: ['ADMIN', 'SUPER_ADMIN']\n  }\n},\n// Profile and settings routes (protected)\n{\n  path: 'profile',\n  loadChildren: () => import('./features/customer/customer.module').then(m => m.CustomerModule),\n  canActivate: [AuthGuard]\n},\n// Catch all route - redirect to dashboard\n{\n  path: '**',\n  redirectTo: '/dashboard'\n}];\nexport class AppRoutingModule {\n  static {\n    this.ɵfac = function AppRoutingModule_Factory(t) {\n      return new (t || AppRoutingModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppRoutingModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [RouterModule.forRoot(routes, {\n        // Enable router tracing for debugging (only in development)\n        enableTracing: false,\n        // Preload all lazy loaded modules for better performance\n        preloadingStrategy: undefined,\n        // Scroll to top on route change\n        scrollPositionRestoration: 'top',\n        // Hash location strategy for deployment compatibility\n        useHash: false\n      }), RouterModule]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppRoutingModule, {\n    imports: [i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","AuthGuard","RoleGuard","routes","path","redirectTo","pathMatch","loadChildren","then","m","AuthModule","DashboardModule","canActivate","CustomerModule","PolicyModule","ClaimsModule","AdminModule","data","roles","AppRoutingModule","forRoot","enableTracing","preloadingStrategy","undefined","scrollPositionRestoration","useHash","imports","i1","exports"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/app-routing.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './core/guards/auth.guard';\nimport { RoleGuard } from './core/guards/role.guard';\n\nconst routes: Routes = [\n  // Default route - redirect to dashboard if authenticated, login if not\n  {\n    path: '',\n    redirectTo: '/dashboard',\n    pathMatch: 'full'\n  },\n  \n  // Authentication routes (lazy loaded)\n  {\n    path: 'auth',\n    loadChildren: () => import('./features/auth/auth.module').then(m => m.AuthModule)\n  },\n  \n  // Dashboard route (protected)\n  {\n    path: 'dashboard',\n    loadChildren: () => import('./features/dashboard/dashboard.module').then(m => m.DashboardModule),\n    canActivate: [AuthGuard]\n  },\n  \n  // Customer routes (protected)\n  {\n    path: 'customer',\n    loadChildren: () => import('./features/customer/customer.module').then(m => m.CustomerModule),\n    canActivate: [AuthGuard]\n  },\n  \n  // Policy routes (protected)\n  {\n    path: 'policies',\n    loadChildren: () => import('./features/policy/policy.module').then(m => m.PolicyModule),\n    canActivate: [AuthGuard]\n  },\n  \n  // Claims routes (protected)\n  {\n    path: 'claims',\n    loadChildren: () => import('./features/claims/claims.module').then(m => m.ClaimsModule),\n    canActivate: [AuthGuard]\n  },\n  \n  // Admin routes (protected with role check)\n  {\n    path: 'admin',\n    loadChildren: () => import('./features/admin/admin.module').then(m => m.AdminModule),\n    canActivate: [AuthGuard, RoleGuard],\n    data: { \n      roles: ['ADMIN', 'SUPER_ADMIN'] \n    }\n  },\n  \n  // Profile and settings routes (protected)\n  {\n    path: 'profile',\n    loadChildren: () => import('./features/customer/customer.module').then(m => m.CustomerModule),\n    canActivate: [AuthGuard]\n  },\n  \n  // Catch all route - redirect to dashboard\n  {\n    path: '**',\n    redirectTo: '/dashboard'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    // Enable router tracing for debugging (only in development)\n    enableTracing: false, // Set to true for debugging\n    // Preload all lazy loaded modules for better performance\n    preloadingStrategy: undefined, // Can use PreloadAllModules if needed\n    // Scroll to top on route change\n    scrollPositionRestoration: 'top',\n    // Hash location strategy for deployment compatibility\n    useHash: false\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }"],"mappings":"AACA,SAASA,YAAY,QAAgB,iBAAiB;AACtD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,SAAS,QAAQ,0BAA0B;;;AAEpD,MAAMC,MAAM,GAAW;AACrB;AACA;EACEC,IAAI,EAAE,EAAE;EACRC,UAAU,EAAE,YAAY;EACxBC,SAAS,EAAE;CACZ;AAED;AACA;EACEF,IAAI,EAAE,MAAM;EACZG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,6BAA6B,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU;CACjF;AAED;AACA;EACEN,IAAI,EAAE,WAAW;EACjBG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,uCAAuC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACE,eAAe,CAAC;EAChGC,WAAW,EAAE,CAACX,SAAS;CACxB;AAED;AACA;EACEG,IAAI,EAAE,UAAU;EAChBG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,qCAAqC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACI,cAAc,CAAC;EAC7FD,WAAW,EAAE,CAACX,SAAS;CACxB;AAED;AACA;EACEG,IAAI,EAAE,UAAU;EAChBG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,iCAAiC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACK,YAAY,CAAC;EACvFF,WAAW,EAAE,CAACX,SAAS;CACxB;AAED;AACA;EACEG,IAAI,EAAE,QAAQ;EACdG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,iCAAiC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACM,YAAY,CAAC;EACvFH,WAAW,EAAE,CAACX,SAAS;CACxB;AAED;AACA;EACEG,IAAI,EAAE,OAAO;EACbG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,+BAA+B,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACO,WAAW,CAAC;EACpFJ,WAAW,EAAE,CAACX,SAAS,EAAEC,SAAS,CAAC;EACnCe,IAAI,EAAE;IACJC,KAAK,EAAE,CAAC,OAAO,EAAE,aAAa;;CAEjC;AAED;AACA;EACEd,IAAI,EAAE,SAAS;EACfG,YAAY,EAAEA,CAAA,KAAM,MAAM,CAAC,qCAAqC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACI,cAAc,CAAC;EAC7FD,WAAW,EAAE,CAACX,SAAS;CACxB;AAED;AACA;EACEG,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE;CACb,CACF;AAeD,OAAM,MAAOc,gBAAgB;;;uBAAhBA,gBAAgB;IAAA;EAAA;;;YAAhBA;IAAgB;EAAA;;;gBAZjBnB,YAAY,CAACoB,OAAO,CAACjB,MAAM,EAAE;QACrC;QACAkB,aAAa,EAAE,KAAK;QACpB;QACAC,kBAAkB,EAAEC,SAAS;QAC7B;QACAC,yBAAyB,EAAE,KAAK;QAChC;QACAC,OAAO,EAAE;OACV,CAAC,EACQzB,YAAY;IAAA;EAAA;;;2EAEXmB,gBAAgB;IAAAO,OAAA,GAAAC,EAAA,CAAA3B,YAAA;IAAA4B,OAAA,GAFjB5B,YAAY;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}