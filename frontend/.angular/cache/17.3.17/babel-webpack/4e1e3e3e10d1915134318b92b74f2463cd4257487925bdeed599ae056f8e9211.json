{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class ClickOutsideDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.clickOutside = new EventEmitter();\n  }\n  onClick(target) {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n  static {\n    this.ɵfac = function ClickOutsideDirective_Factory(t) {\n      return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: ClickOutsideDirective,\n      selectors: [[\"\", \"appClickOutside\", \"\"]],\n      hostBindings: function ClickOutsideDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ClickOutsideDirective_click_HostBindingHandler($event) {\n            return ctx.onClick($event.target);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      outputs: {\n        clickOutside: \"clickOutside\"\n      }\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","ClickOutsideDirective","constructor","elementRef","clickOutside","onClick","target","clickedInside","nativeElement","contains","emit","i0","ɵɵdirectiveInject","ElementRef","selectors","hostBindings","ClickOutsideDirective_HostBindings","rf","ctx","ɵɵlistener","ClickOutsideDirective_click_HostBindingHandler","$event","ɵɵresolveDocument"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/shared/directives/click-outside.directive.ts"],"sourcesContent":["import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n  selector: '[appClickOutside]'\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside = new EventEmitter<void>();\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target: any): void {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n}"],"mappings":"AAAA,SAAgCA,YAAY,QAA8B,eAAe;;AAKzF,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFpB,KAAAC,YAAY,GAAG,IAAIJ,YAAY,EAAQ;EAEJ;EAGtCK,OAAOA,CAACC,MAAW;IACxB,MAAMC,aAAa,GAAG,IAAI,CAACJ,UAAU,CAACK,aAAa,CAACC,QAAQ,CAACH,MAAM,CAAC;IACpE,IAAI,CAACC,aAAa,EAAE;MAClB,IAAI,CAACH,YAAY,CAACM,IAAI,EAAE;;EAE5B;;;uBAXWT,qBAAqB,EAAAU,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;IAAA;EAAA;;;YAArBZ,qBAAqB;MAAAa,SAAA;MAAAC,YAAA,WAAAC,mCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAArBN,EAAA,CAAAQ,UAAA,mBAAAC,+CAAAC,MAAA;YAAA,OAAAH,GAAA,CAAAb,OAAA,CAAAgB,MAAA,CAAAf,MAAA,CAAsB;UAAA,UAAAK,EAAA,CAAAW,iBAAA,CAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}