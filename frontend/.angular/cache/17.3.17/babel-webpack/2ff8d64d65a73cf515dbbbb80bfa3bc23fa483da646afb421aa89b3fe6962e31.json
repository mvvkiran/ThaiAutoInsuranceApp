{"ast":null,"code":"import { BehaviorSubject, throwError, timer } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Initialize user from localStorage if available\n    this.initializeFromStorage();\n  }\n  // Public getters\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  get isAuthenticated() {\n    return !!this.getToken() && !!this.currentUser;\n  }\n  get isAdmin() {\n    return this.currentUser?.role === 'ADMIN' || this.currentUser?.role === 'SUPER_ADMIN';\n  }\n  get userRole() {\n    return this.currentUser?.role || null;\n  }\n  // Authentication methods\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Login failed');\n      }\n      return response.data;\n    }), tap(loginResponse => {\n      this.setSession(loginResponse);\n    }), catchError(error => {\n      console.error('Login error:', error);\n      return throwError(() => error);\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Registration failed');\n      }\n      return response.data;\n    }), catchError(error => {\n      console.error('Registration error:', error);\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    this.clearSession();\n    this.currentUserSubject.next(null);\n    this.clearTokenExpirationTimer();\n    this.router.navigate(['/auth/login']);\n  }\n  refreshToken(refreshToken) {\n    const request = {\n      refreshToken\n    };\n    return this.http.post(`${this.apiUrl}/refresh-token`, request).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Token refresh failed');\n      }\n      return response.data;\n    }), tap(loginResponse => {\n      this.setSession(loginResponse);\n    }), catchError(error => {\n      console.error('Token refresh error:', error);\n      this.logout();\n      return throwError(() => error);\n    }));\n  }\n  forgotPassword(email) {\n    const request = {\n      email\n    };\n    return this.http.post(`${this.apiUrl}/forgot-password`, request).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password reset request failed');\n      }\n    }), catchError(error => {\n      console.error('Forgot password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  resetPassword(token, newPassword) {\n    return this.http.post(`${this.apiUrl}/reset-password`, {\n      token,\n      newPassword\n    }).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password reset failed');\n      }\n    }), catchError(error => {\n      console.error('Reset password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  changePassword(request) {\n    return this.http.post(`${this.apiUrl}/change-password`, request).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password change failed');\n      }\n    }), catchError(error => {\n      console.error('Change password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  verifyEmail(token) {\n    return this.http.post(`${this.apiUrl}/verify-email`, {\n      token\n    }).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Email verification failed');\n      }\n    }), catchError(error => {\n      console.error('Email verification error:', error);\n      return throwError(() => error);\n    }));\n  }\n  resendVerificationEmail() {\n    return this.http.post(`${this.apiUrl}/resend-verification`, {}).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Resend verification failed');\n      }\n    }), catchError(error => {\n      console.error('Resend verification error:', error);\n      return throwError(() => error);\n    }));\n  }\n  // Token management\n  getToken() {\n    return localStorage.getItem(environment.storage.tokenKey);\n  }\n  getRefreshToken() {\n    return localStorage.getItem(`${environment.storage.tokenKey}_refresh`);\n  }\n  // Session management\n  setSession(loginResponse) {\n    const {\n      user,\n      accessToken,\n      refreshToken,\n      expiresIn\n    } = loginResponse;\n    // Calculate expiration date from duration\n    const expiresAt = new Date(Date.now() + expiresIn);\n    // Store tokens\n    localStorage.setItem(environment.storage.tokenKey, accessToken);\n    localStorage.setItem(`${environment.storage.tokenKey}_refresh`, refreshToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(user));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    // Update current user\n    this.currentUserSubject.next(user);\n    // Set token expiration timer\n    this.setTokenExpirationTimer(expiresAt);\n  }\n  clearSession() {\n    localStorage.removeItem(environment.storage.tokenKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_refresh`);\n    localStorage.removeItem(environment.storage.userKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_expires`);\n  }\n  initializeFromStorage() {\n    try {\n      const userJson = localStorage.getItem(environment.storage.userKey);\n      const token = this.getToken();\n      const expiresAtStr = localStorage.getItem(`${environment.storage.tokenKey}_expires`);\n      if (userJson && token && expiresAtStr) {\n        const user = JSON.parse(userJson);\n        const expiresAt = new Date(expiresAtStr);\n        // Check if token is still valid\n        if (expiresAt > new Date()) {\n          this.currentUserSubject.next(user);\n          this.setTokenExpirationTimer(expiresAt);\n        } else {\n          // Token expired, try to refresh\n          const refreshToken = this.getRefreshToken();\n          if (refreshToken) {\n            this.refreshToken(refreshToken).subscribe({\n              error: () => this.clearSession()\n            });\n          } else {\n            this.clearSession();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth from storage:', error);\n      this.clearSession();\n    }\n  }\n  setTokenExpirationTimer(expirationDate) {\n    this.clearTokenExpirationTimer();\n    const expiresInMs = expirationDate.getTime() - new Date().getTime();\n    if (expiresInMs > 0) {\n      // Set timer to refresh token 5 minutes before expiration\n      const refreshTime = Math.max(expiresInMs - 5 * 60 * 1000, 60000); // At least 1 minute\n      this.tokenExpirationTimer = timer(refreshTime).subscribe(() => {\n        const refreshToken = this.getRefreshToken();\n        if (refreshToken) {\n          this.refreshToken(refreshToken).subscribe({\n            error: () => this.logout()\n          });\n        } else {\n          this.logout();\n        }\n      });\n    }\n  }\n  clearTokenExpirationTimer() {\n    if (this.tokenExpirationTimer) {\n      this.tokenExpirationTimer.unsubscribe();\n      this.tokenExpirationTimer = undefined;\n    }\n  }\n  // Utility methods\n  hasPermission(permission) {\n    if (!this.currentUser) {\n      return false;\n    }\n    // Super admin has all permissions\n    if (this.currentUser.role === 'SUPER_ADMIN') {\n      return true;\n    }\n    // Add specific permission logic based on roles\n    switch (permission) {\n      case 'VIEW_ALL_POLICIES':\n      case 'VIEW_ALL_CLAIMS':\n      case 'MANAGE_USERS':\n        return this.currentUser.role === 'ADMIN';\n      case 'CREATE_POLICY':\n      case 'VIEW_OWN_POLICIES':\n      case 'CREATE_CLAIM':\n      case 'VIEW_OWN_CLAIMS':\n        return true;\n      // All authenticated users\n      default:\n        return false;\n    }\n  }\n  canAccessRoute(requiredRoles) {\n    if (!this.currentUser) {\n      return false;\n    }\n    return requiredRoles.includes(this.currentUser.role);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","timer","map","tap","catchError","environment","AuthService","constructor","http","router","apiUrl","currentUserSubject","currentUser$","asObservable","initializeFromStorage","currentUser","value","isAuthenticated","getToken","isAdmin","role","userRole","login","credentials","post","pipe","response","success","data","Error","message","loginResponse","setSession","error","console","register","userData","logout","clearSession","next","clearTokenExpirationTimer","navigate","refreshToken","request","forgotPassword","email","resetPassword","token","newPassword","changePassword","verifyEmail","resendVerificationEmail","localStorage","getItem","storage","tokenKey","getRefreshToken","user","accessToken","expiresIn","expiresAt","Date","now","setItem","userKey","JSON","stringify","toString","setTokenExpirationTimer","removeItem","userJson","expiresAtStr","parse","subscribe","expirationDate","expiresInMs","getTime","refreshTime","Math","max","tokenExpirationTimer","unsubscribe","undefined","hasPermission","permission","canAccessRoute","requiredRoles","includes","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError, timer } from 'rxjs';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../environments/environment';\nimport { \n  User, \n  LoginRequest, \n  LoginResponse, \n  RegisterRequest, \n  ResetPasswordRequest,\n  ChangePasswordRequest,\n  RefreshTokenRequest,\n  ApiResponse\n} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  private tokenExpirationTimer?: any;\n\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    // Initialize user from localStorage if available\n    this.initializeFromStorage();\n  }\n\n  // Public getters\n  get currentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  get isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.currentUser;\n  }\n\n  get isAdmin(): boolean {\n    return this.currentUser?.role === 'ADMIN' || this.currentUser?.role === 'SUPER_ADMIN';\n  }\n\n  get userRole(): string | null {\n    return this.currentUser?.role || null;\n  }\n\n  // Authentication methods\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.http.post<ApiResponse<LoginResponse>>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Login failed');\n          }\n          return response.data;\n        }),\n        tap(loginResponse => {\n          this.setSession(loginResponse);\n        }),\n        catchError(error => {\n          console.error('Login error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<User> {\n    return this.http.post<ApiResponse<User>>(`${this.apiUrl}/register`, userData)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Registration failed');\n          }\n          return response.data;\n        }),\n        catchError(error => {\n          console.error('Registration error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  logout(): void {\n    this.clearSession();\n    this.currentUserSubject.next(null);\n    this.clearTokenExpirationTimer();\n    this.router.navigate(['/auth/login']);\n  }\n\n  refreshToken(refreshToken: string): Observable<LoginResponse> {\n    const request: RefreshTokenRequest = { refreshToken };\n    \n    return this.http.post<ApiResponse<LoginResponse>>(`${this.apiUrl}/refresh-token`, request)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Token refresh failed');\n          }\n          return response.data;\n        }),\n        tap(loginResponse => {\n          this.setSession(loginResponse);\n        }),\n        catchError(error => {\n          console.error('Token refresh error:', error);\n          this.logout();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  forgotPassword(email: string): Observable<void> {\n    const request: ResetPasswordRequest = { email };\n    \n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/forgot-password`, request)\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password reset request failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Forgot password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/reset-password`, {\n      token,\n      newPassword\n    })\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password reset failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Reset password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  changePassword(request: ChangePasswordRequest): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/change-password`, request)\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password change failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Change password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  verifyEmail(token: string): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/verify-email`, { token })\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Email verification failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Email verification error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  resendVerificationEmail(): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/resend-verification`, {})\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Resend verification failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Resend verification error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  // Token management\n  getToken(): string | null {\n    return localStorage.getItem(environment.storage.tokenKey);\n  }\n\n  getRefreshToken(): string | null {\n    return localStorage.getItem(`${environment.storage.tokenKey}_refresh`);\n  }\n\n  // Session management\n  private setSession(loginResponse: LoginResponse): void {\n    const { user, accessToken, refreshToken, expiresIn } = loginResponse;\n    \n    // Calculate expiration date from duration\n    const expiresAt = new Date(Date.now() + expiresIn);\n    \n    // Store tokens\n    localStorage.setItem(environment.storage.tokenKey, accessToken);\n    localStorage.setItem(`${environment.storage.tokenKey}_refresh`, refreshToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(user));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    \n    // Update current user\n    this.currentUserSubject.next(user);\n    \n    // Set token expiration timer\n    this.setTokenExpirationTimer(expiresAt);\n  }\n\n  private clearSession(): void {\n    localStorage.removeItem(environment.storage.tokenKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_refresh`);\n    localStorage.removeItem(environment.storage.userKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_expires`);\n  }\n\n  private initializeFromStorage(): void {\n    try {\n      const userJson = localStorage.getItem(environment.storage.userKey);\n      const token = this.getToken();\n      const expiresAtStr = localStorage.getItem(`${environment.storage.tokenKey}_expires`);\n\n      if (userJson && token && expiresAtStr) {\n        const user = JSON.parse(userJson) as User;\n        const expiresAt = new Date(expiresAtStr);\n\n        // Check if token is still valid\n        if (expiresAt > new Date()) {\n          this.currentUserSubject.next(user);\n          this.setTokenExpirationTimer(expiresAt);\n        } else {\n          // Token expired, try to refresh\n          const refreshToken = this.getRefreshToken();\n          if (refreshToken) {\n            this.refreshToken(refreshToken).subscribe({\n              error: () => this.clearSession()\n            });\n          } else {\n            this.clearSession();\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth from storage:', error);\n      this.clearSession();\n    }\n  }\n\n  private setTokenExpirationTimer(expirationDate: Date): void {\n    this.clearTokenExpirationTimer();\n    \n    const expiresInMs = expirationDate.getTime() - new Date().getTime();\n    \n    if (expiresInMs > 0) {\n      // Set timer to refresh token 5 minutes before expiration\n      const refreshTime = Math.max(expiresInMs - (5 * 60 * 1000), 60000); // At least 1 minute\n      \n      this.tokenExpirationTimer = timer(refreshTime).subscribe(() => {\n        const refreshToken = this.getRefreshToken();\n        if (refreshToken) {\n          this.refreshToken(refreshToken).subscribe({\n            error: () => this.logout()\n          });\n        } else {\n          this.logout();\n        }\n      });\n    }\n  }\n\n  private clearTokenExpirationTimer(): void {\n    if (this.tokenExpirationTimer) {\n      this.tokenExpirationTimer.unsubscribe();\n      this.tokenExpirationTimer = undefined;\n    }\n  }\n\n  // Utility methods\n  hasPermission(permission: string): boolean {\n    if (!this.currentUser) {\n      return false;\n    }\n\n    // Super admin has all permissions\n    if (this.currentUser.role === 'SUPER_ADMIN') {\n      return true;\n    }\n\n    // Add specific permission logic based on roles\n    switch (permission) {\n      case 'VIEW_ALL_POLICIES':\n      case 'VIEW_ALL_CLAIMS':\n      case 'MANAGE_USERS':\n        return this.currentUser.role === 'ADMIN';\n      \n      case 'CREATE_POLICY':\n      case 'VIEW_OWN_POLICIES':\n      case 'CREATE_CLAIM':\n      case 'VIEW_OWN_CLAIMS':\n        return true; // All authenticated users\n      \n      default:\n        return false;\n    }\n  }\n\n  canAccessRoute(requiredRoles: string[]): boolean {\n    if (!this.currentUser) {\n      return false;\n    }\n\n    return requiredRoles.includes(this.currentUser.role);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}