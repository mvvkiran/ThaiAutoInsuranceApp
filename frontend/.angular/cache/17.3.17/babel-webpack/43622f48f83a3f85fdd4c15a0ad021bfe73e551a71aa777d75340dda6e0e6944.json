{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { ErrorCode } from '../models/common.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/notification.service\";\nimport * as i2 from \"../services/translation.service\";\nexport class ErrorInterceptor {\n  constructor(notificationService, translationService) {\n    this.notificationService = notificationService;\n    this.translationService = translationService;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(\n    // Retry failed requests (except for certain error types)\n    retry({\n      count: this.shouldRetry(req) ? environment.api.retryAttempts : 0,\n      delay: (error, retryCount) => {\n        // Exponential backoff\n        return new Promise(resolve => {\n          setTimeout(resolve, environment.api.retryDelay * Math.pow(2, retryCount - 1));\n        });\n      }\n    }), catchError(error => {\n      const appError = this.createAppError(error, req);\n      // Log error in development\n      if (!environment.production) {\n        console.error('HTTP Error:', appError);\n      }\n      // Show user-friendly error message\n      this.handleUserNotification(appError);\n      return throwError(() => appError);\n    }));\n  }\n  shouldRetry(req) {\n    // Don't retry for certain methods and endpoints\n    const nonRetryableMethods = ['POST', 'PUT', 'DELETE'];\n    const nonRetryableEndpoints = ['/auth/login', '/auth/register'];\n    return !nonRetryableMethods.includes(req.method.toUpperCase()) && !nonRetryableEndpoints.some(endpoint => req.url.includes(endpoint));\n  }\n  createAppError(error, req) {\n    let appError = {\n      code: ErrorCode.SERVER_ERROR,\n      message: 'An unexpected error occurred',\n      messageThai: 'เกิดข้อผิดพลาดที่ไม่คาดคิด',\n      timestamp: new Date(),\n      path: req.url,\n      method: req.method,\n      statusCode: error.status\n    };\n    if (error.error && typeof error.error === 'object') {\n      // Server returned structured error response\n      appError = {\n        ...appError,\n        code: error.error.code || this.getErrorCodeFromStatus(error.status),\n        message: error.error.message || appError.message,\n        messageThai: error.error.messageThai || appError.messageThai,\n        details: error.error.errors || error.error.details\n      };\n    } else {\n      // Handle different error types\n      switch (error.status) {\n        case 0:\n          appError.code = ErrorCode.NETWORK_ERROR;\n          appError.message = 'Network connection error';\n          appError.messageThai = 'เกิดข้อผิดพลาดในการเชื่อมต่อเครือข่าย';\n          break;\n        case 400:\n          appError.code = ErrorCode.VALIDATION_ERROR;\n          appError.message = 'Invalid request data';\n          appError.messageThai = 'ข้อมูลที่ส่งมาไม่ถูกต้อง';\n          break;\n        case 401:\n          appError.code = ErrorCode.UNAUTHORIZED;\n          appError.message = 'Authentication required';\n          appError.messageThai = 'จำเป็นต้องเข้าสู่ระบบ';\n          break;\n        case 403:\n          appError.code = ErrorCode.FORBIDDEN;\n          appError.message = 'Access denied';\n          appError.messageThai = 'ไม่มีสิทธิ์ในการเข้าถึง';\n          break;\n        case 404:\n          appError.code = ErrorCode.NOT_FOUND;\n          appError.message = 'Resource not found';\n          appError.messageThai = 'ไม่พบข้อมูลที่ต้องการ';\n          break;\n        case 409:\n          appError.code = ErrorCode.CONFLICT;\n          appError.message = 'Resource conflict';\n          appError.messageThai = 'ข้อมูลขัดแย้ง';\n          break;\n        case 422:\n          appError.code = ErrorCode.BUSINESS_RULE_VIOLATION;\n          appError.message = 'Business rule violation';\n          appError.messageThai = 'ข้อมูลไม่เป็นไปตามกฎเกณฑ์ทางธุรกิจ';\n          break;\n        case 408:\n        case 504:\n          appError.code = ErrorCode.TIMEOUT_ERROR;\n          appError.message = 'Request timeout';\n          appError.messageThai = 'การร้องขอหมดเวลา';\n          break;\n        default:\n          if (error.status >= 500) {\n            appError.code = ErrorCode.SERVER_ERROR;\n            appError.message = 'Server error';\n            appError.messageThai = 'เกิดข้อผิดพลาดที่เซิร์ฟเวอร์';\n          }\n      }\n    }\n    return appError;\n  }\n  getErrorCodeFromStatus(status) {\n    switch (status) {\n      case 400:\n        return ErrorCode.VALIDATION_ERROR;\n      case 401:\n        return ErrorCode.UNAUTHORIZED;\n      case 403:\n        return ErrorCode.FORBIDDEN;\n      case 404:\n        return ErrorCode.NOT_FOUND;\n      case 409:\n        return ErrorCode.CONFLICT;\n      case 422:\n        return ErrorCode.BUSINESS_RULE_VIOLATION;\n      case 408:\n      case 504:\n        return ErrorCode.TIMEOUT_ERROR;\n      default:\n        return status >= 500 ? ErrorCode.SERVER_ERROR : ErrorCode.VALIDATION_ERROR;\n    }\n  }\n  handleUserNotification(error) {\n    // Don't show notifications for certain error types\n    const silentErrors = [ErrorCode.UNAUTHORIZED];\n    if (silentErrors.includes(error.code)) {\n      return;\n    }\n    // Show different notification types based on error severity\n    const isCurrentLanguageThai = this.translationService.getCurrentLanguage() === 'th';\n    const message = isCurrentLanguageThai && error.messageThai ? error.messageThai : error.message;\n    switch (error.code) {\n      case ErrorCode.NETWORK_ERROR:\n      case ErrorCode.TIMEOUT_ERROR:\n        this.notificationService.showError(message, {\n          duration: 5000,\n          action: 'Retry'\n        });\n        break;\n      case ErrorCode.VALIDATION_ERROR:\n        this.notificationService.showWarning(message, {\n          duration: 4000\n        });\n        break;\n      case ErrorCode.FORBIDDEN:\n      case ErrorCode.NOT_FOUND:\n        this.notificationService.showInfo(message, {\n          duration: 3000\n        });\n        break;\n      default:\n        this.notificationService.showError(message, {\n          duration: 4000\n        });\n    }\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.NotificationService), i0.ɵɵinject(i2.TranslationService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","retry","environment","ErrorCode","ErrorInterceptor","constructor","notificationService","translationService","intercept","req","next","handle","pipe","count","shouldRetry","api","retryAttempts","delay","error","retryCount","Promise","resolve","setTimeout","retryDelay","Math","pow","appError","createAppError","production","console","handleUserNotification","nonRetryableMethods","nonRetryableEndpoints","includes","method","toUpperCase","some","endpoint","url","code","SERVER_ERROR","message","messageThai","timestamp","Date","path","statusCode","status","getErrorCodeFromStatus","details","errors","NETWORK_ERROR","VALIDATION_ERROR","UNAUTHORIZED","FORBIDDEN","NOT_FOUND","CONFLICT","BUSINESS_RULE_VIOLATION","TIMEOUT_ERROR","silentErrors","isCurrentLanguageThai","getCurrentLanguage","showError","duration","action","showWarning","showInfo","i0","ɵɵinject","i1","NotificationService","i2","TranslationService","factory","ɵfac"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/interceptors/error.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { NotificationService } from '../services/notification.service';\nimport { TranslationService } from '../services/translation.service';\nimport { environment } from '../../../environments/environment';\nimport { AppError, ErrorCode } from '../models/common.model';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  \n  constructor(\n    private notificationService: NotificationService,\n    private translationService: TranslationService\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      // Retry failed requests (except for certain error types)\n      retry({\n        count: this.shouldRetry(req) ? environment.api.retryAttempts : 0,\n        delay: (error: HttpErrorResponse, retryCount: number) => {\n          // Exponential backoff\n          return new Promise(resolve => {\n            setTimeout(resolve, environment.api.retryDelay * Math.pow(2, retryCount - 1));\n          });\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        const appError = this.createAppError(error, req);\n        \n        // Log error in development\n        if (!environment.production) {\n          console.error('HTTP Error:', appError);\n        }\n\n        // Show user-friendly error message\n        this.handleUserNotification(appError);\n\n        return throwError(() => appError);\n      })\n    );\n  }\n\n  private shouldRetry(req: HttpRequest<any>): boolean {\n    // Don't retry for certain methods and endpoints\n    const nonRetryableMethods = ['POST', 'PUT', 'DELETE'];\n    const nonRetryableEndpoints = ['/auth/login', '/auth/register'];\n\n    return !nonRetryableMethods.includes(req.method.toUpperCase()) &&\n           !nonRetryableEndpoints.some(endpoint => req.url.includes(endpoint));\n  }\n\n  private createAppError(error: HttpErrorResponse, req: HttpRequest<any>): AppError {\n    let appError: AppError = {\n      code: ErrorCode.SERVER_ERROR,\n      message: 'An unexpected error occurred',\n      messageThai: 'เกิดข้อผิดพลาดที่ไม่คาดคิด',\n      timestamp: new Date(),\n      path: req.url,\n      method: req.method,\n      statusCode: error.status\n    };\n\n    if (error.error && typeof error.error === 'object') {\n      // Server returned structured error response\n      appError = {\n        ...appError,\n        code: error.error.code || this.getErrorCodeFromStatus(error.status),\n        message: error.error.message || appError.message,\n        messageThai: error.error.messageThai || appError.messageThai,\n        details: error.error.errors || error.error.details\n      };\n    } else {\n      // Handle different error types\n      switch (error.status) {\n        case 0:\n          appError.code = ErrorCode.NETWORK_ERROR;\n          appError.message = 'Network connection error';\n          appError.messageThai = 'เกิดข้อผิดพลาดในการเชื่อมต่อเครือข่าย';\n          break;\n        case 400:\n          appError.code = ErrorCode.VALIDATION_ERROR;\n          appError.message = 'Invalid request data';\n          appError.messageThai = 'ข้อมูลที่ส่งมาไม่ถูกต้อง';\n          break;\n        case 401:\n          appError.code = ErrorCode.UNAUTHORIZED;\n          appError.message = 'Authentication required';\n          appError.messageThai = 'จำเป็นต้องเข้าสู่ระบบ';\n          break;\n        case 403:\n          appError.code = ErrorCode.FORBIDDEN;\n          appError.message = 'Access denied';\n          appError.messageThai = 'ไม่มีสิทธิ์ในการเข้าถึง';\n          break;\n        case 404:\n          appError.code = ErrorCode.NOT_FOUND;\n          appError.message = 'Resource not found';\n          appError.messageThai = 'ไม่พบข้อมูลที่ต้องการ';\n          break;\n        case 409:\n          appError.code = ErrorCode.CONFLICT;\n          appError.message = 'Resource conflict';\n          appError.messageThai = 'ข้อมูลขัดแย้ง';\n          break;\n        case 422:\n          appError.code = ErrorCode.BUSINESS_RULE_VIOLATION;\n          appError.message = 'Business rule violation';\n          appError.messageThai = 'ข้อมูลไม่เป็นไปตามกฎเกณฑ์ทางธุรกิจ';\n          break;\n        case 408:\n        case 504:\n          appError.code = ErrorCode.TIMEOUT_ERROR;\n          appError.message = 'Request timeout';\n          appError.messageThai = 'การร้องขอหมดเวลา';\n          break;\n        default:\n          if (error.status >= 500) {\n            appError.code = ErrorCode.SERVER_ERROR;\n            appError.message = 'Server error';\n            appError.messageThai = 'เกิดข้อผิดพลาดที่เซิร์ฟเวอร์';\n          }\n      }\n    }\n\n    return appError;\n  }\n\n  private getErrorCodeFromStatus(status: number): ErrorCode {\n    switch (status) {\n      case 400: return ErrorCode.VALIDATION_ERROR;\n      case 401: return ErrorCode.UNAUTHORIZED;\n      case 403: return ErrorCode.FORBIDDEN;\n      case 404: return ErrorCode.NOT_FOUND;\n      case 409: return ErrorCode.CONFLICT;\n      case 422: return ErrorCode.BUSINESS_RULE_VIOLATION;\n      case 408:\n      case 504: return ErrorCode.TIMEOUT_ERROR;\n      default: \n        return status >= 500 ? ErrorCode.SERVER_ERROR : ErrorCode.VALIDATION_ERROR;\n    }\n  }\n\n  private handleUserNotification(error: AppError): void {\n    // Don't show notifications for certain error types\n    const silentErrors = [ErrorCode.UNAUTHORIZED];\n    \n    if (silentErrors.includes(error.code as ErrorCode)) {\n      return;\n    }\n\n    // Show different notification types based on error severity\n    const isCurrentLanguageThai = this.translationService.getCurrentLanguage() === 'th';\n    const message = isCurrentLanguageThai && error.messageThai ? error.messageThai : error.message;\n\n    switch (error.code) {\n      case ErrorCode.NETWORK_ERROR:\n      case ErrorCode.TIMEOUT_ERROR:\n        this.notificationService.showError(message, {\n          duration: 5000,\n          action: 'Retry'\n        });\n        break;\n      case ErrorCode.VALIDATION_ERROR:\n        this.notificationService.showWarning(message, {\n          duration: 4000\n        });\n        break;\n      case ErrorCode.FORBIDDEN:\n      case ErrorCode.NOT_FOUND:\n        this.notificationService.showInfo(message, {\n          duration: 3000\n        });\n        break;\n      default:\n        this.notificationService.showError(message, {\n          duration: 4000\n        });\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}