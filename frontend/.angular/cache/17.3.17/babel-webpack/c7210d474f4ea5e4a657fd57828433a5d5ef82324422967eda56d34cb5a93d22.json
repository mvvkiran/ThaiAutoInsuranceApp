{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TranslationService {\n  constructor(http) {\n    this.http = http;\n    this.currentLanguageSubject = new BehaviorSubject('th');\n    this.translations = new Map();\n    this.loadingTranslations = new Set();\n    this.currentLanguage$ = this.currentLanguageSubject.asObservable();\n    this.initializeLanguage();\n  }\n  get currentLanguage() {\n    return this.currentLanguageSubject.value;\n  }\n  /**\n   * Set the current language and load translations if not already loaded\n   */\n  setLanguage(language) {\n    if (language === this.currentLanguage) {\n      return of(this.translations.get(language) || {});\n    }\n    return this.loadTranslations(language).pipe(tap(() => {\n      this.currentLanguageSubject.next(language);\n      this.saveLanguagePreference(language);\n      this.updateDocumentLanguage(language);\n    }));\n  }\n  /**\n   * Get translation for a key\n   */\n  translate(key, params) {\n    const currentTranslations = this.translations.get(this.currentLanguage) || {};\n    let translation = this.getNestedValue(currentTranslations, key);\n    if (!translation) {\n      // Fallback to English if Thai translation not found\n      if (this.currentLanguage === 'th') {\n        const englishTranslations = this.translations.get('en') || {};\n        translation = this.getNestedValue(englishTranslations, key);\n      }\n      // If still not found, return the key itself\n      if (!translation) {\n        console.warn(`Translation not found for key: ${key}`);\n        return key;\n      }\n    }\n    // Replace parameters in translation\n    if (params && typeof translation === 'string') {\n      Object.keys(params).forEach(param => {\n        const placeholder = new RegExp(`{{\\\\s*${param}\\\\s*}}`, 'g');\n        translation = translation.replace(placeholder, params[param]);\n      });\n    }\n    return translation;\n  }\n  /**\n   * Get translation as observable (useful for templates)\n   */\n  get(key, params) {\n    return this.currentLanguage$.pipe(map(() => this.translate(key, params)));\n  }\n  /**\n   * Get instant translation (synchronous)\n   */\n  instant(key, params) {\n    return this.translate(key, params);\n  }\n  /**\n   * Load translations for a specific language\n   */\n  loadTranslations(language) {\n    // Avoid duplicate loading\n    if (this.loadingTranslations.has(language)) {\n      return new BehaviorSubject(this.translations.get(language) || {}).asObservable();\n    }\n    // Return cached translations if available\n    if (this.translations.has(language)) {\n      return of(this.translations.get(language));\n    }\n    this.loadingTranslations.add(language);\n    return this.http.get(`/assets/i18n/${language}.json`).pipe(tap(translations => {\n      this.translations.set(language, translations);\n      this.loadingTranslations.delete(language);\n    }), catchError(error => {\n      console.error(`Failed to load translations for ${language}:`, error);\n      this.loadingTranslations.delete(language);\n      // Return empty object as fallback\n      const fallbackTranslations = {};\n      this.translations.set(language, fallbackTranslations);\n      return of(fallbackTranslations);\n    }));\n  }\n  /**\n   * Initialize language from localStorage or browser preference\n   */\n  initializeLanguage() {\n    const savedLanguage = localStorage.getItem(environment.storage.languageKey);\n    const browserLanguage = this.getBrowserLanguage();\n    const defaultLanguage = environment.defaultLanguage;\n    let targetLanguage;\n    if (savedLanguage && this.isSupportedLanguage(savedLanguage)) {\n      targetLanguage = savedLanguage;\n    } else if (this.isSupportedLanguage(browserLanguage)) {\n      targetLanguage = browserLanguage;\n    } else {\n      targetLanguage = defaultLanguage;\n    }\n    // Load initial translations\n    this.loadTranslations(targetLanguage).subscribe(() => {\n      this.currentLanguageSubject.next(targetLanguage);\n      this.updateDocumentLanguage(targetLanguage);\n    });\n  }\n  /**\n   * Get browser language\n   */\n  getBrowserLanguage() {\n    if (typeof navigator !== 'undefined') {\n      return navigator.language?.split('-')[0] || 'en';\n    }\n    return 'en';\n  }\n  /**\n   * Check if language is supported\n   */\n  isSupportedLanguage(language) {\n    return environment.supportedLanguages.includes(language);\n  }\n  /**\n   * Save language preference to localStorage\n   */\n  saveLanguagePreference(language) {\n    localStorage.setItem(environment.storage.languageKey, language);\n  }\n  /**\n   * Update document language attribute and direction\n   */\n  updateDocumentLanguage(language) {\n    if (typeof document !== 'undefined') {\n      document.documentElement.lang = language;\n      // Thai is LTR, but in case we add RTL languages in the future\n      document.documentElement.dir = 'ltr';\n    }\n  }\n  /**\n   * Get nested value from object using dot notation\n   */\n  getNestedValue(obj, key) {\n    return key.split('.').reduce((current, prop) => {\n      return current?.[prop];\n    }, obj);\n  }\n  /**\n   * Toggle between Thai and English\n   */\n  toggleLanguage() {\n    const newLanguage = this.currentLanguage === 'th' ? 'en' : 'th';\n    return this.setLanguage(newLanguage);\n  }\n  /**\n   * Get all supported languages\n   */\n  getSupportedLanguages() {\n    return [{\n      code: 'th',\n      name: 'Thai',\n      nativeName: 'ไทย'\n    }, {\n      code: 'en',\n      name: 'English',\n      nativeName: 'English'\n    }];\n  }\n  /**\n   * Check if current language is Thai\n   */\n  isThaiLanguage() {\n    return this.currentLanguage === 'th';\n  }\n  /**\n   * Check if current language is English\n   */\n  isEnglishLanguage() {\n    return this.currentLanguage === 'en';\n  }\n  /**\n   * Format number according to current locale\n   */\n  formatNumber(value, options) {\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    return new Intl.NumberFormat(locale, options).format(value);\n  }\n  /**\n   * Format currency in Thai Baht\n   */\n  formatCurrency(value) {\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: 'THB',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n  /**\n   * Format date according to current locale\n   */\n  formatDate(date, options) {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    const defaultOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Intl.DateTimeFormat(locale, {\n      ...defaultOptions,\n      ...options\n    }).format(dateObj);\n  }\n  /**\n   * Format date time according to current locale\n   */\n  formatDateTime(date, options) {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    const defaultOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    return new Intl.DateTimeFormat(locale, {\n      ...defaultOptions,\n      ...options\n    }).format(dateObj);\n  }\n  static {\n    this.ɵfac = function TranslationService_Factory(t) {\n      return new (t || TranslationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TranslationService,\n      factory: TranslationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","map","catchError","tap","environment","TranslationService","constructor","http","currentLanguageSubject","translations","Map","loadingTranslations","Set","currentLanguage$","asObservable","initializeLanguage","currentLanguage","value","setLanguage","language","get","loadTranslations","pipe","next","saveLanguagePreference","updateDocumentLanguage","translate","key","params","currentTranslations","translation","getNestedValue","englishTranslations","console","warn","Object","keys","forEach","param","placeholder","RegExp","replace","instant","has","add","set","delete","error","fallbackTranslations","savedLanguage","localStorage","getItem","storage","languageKey","browserLanguage","getBrowserLanguage","defaultLanguage","targetLanguage","isSupportedLanguage","subscribe","navigator","split","supportedLanguages","includes","setItem","document","documentElement","lang","dir","obj","reduce","current","prop","toggleLanguage","newLanguage","getSupportedLanguages","code","name","nativeName","isThaiLanguage","isEnglishLanguage","formatNumber","options","locale","Intl","NumberFormat","format","formatCurrency","style","currency","minimumFractionDigits","maximumFractionDigits","formatDate","date","dateObj","Date","defaultOptions","year","month","day","DateTimeFormat","formatDateTime","hour","minute","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/services/translation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport type SupportedLanguage = 'th' | 'en';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService {\n  private currentLanguageSubject = new BehaviorSubject<SupportedLanguage>('th');\n  private translations = new Map<SupportedLanguage, any>();\n  private loadingTranslations = new Set<SupportedLanguage>();\n\n  public currentLanguage$ = this.currentLanguageSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.initializeLanguage();\n  }\n\n  get currentLanguage(): SupportedLanguage {\n    return this.currentLanguageSubject.value;\n  }\n\n  /**\n   * Set the current language and load translations if not already loaded\n   */\n  setLanguage(language: SupportedLanguage): Observable<any> {\n    if (language === this.currentLanguage) {\n      return of(this.translations.get(language) || {});\n    }\n\n    return this.loadTranslations(language).pipe(\n      tap(() => {\n        this.currentLanguageSubject.next(language);\n        this.saveLanguagePreference(language);\n        this.updateDocumentLanguage(language);\n      })\n    );\n  }\n\n  /**\n   * Get translation for a key\n   */\n  translate(key: string, params?: { [key: string]: any }): string {\n    const currentTranslations = this.translations.get(this.currentLanguage) || {};\n    let translation = this.getNestedValue(currentTranslations, key);\n\n    if (!translation) {\n      // Fallback to English if Thai translation not found\n      if (this.currentLanguage === 'th') {\n        const englishTranslations = this.translations.get('en') || {};\n        translation = this.getNestedValue(englishTranslations, key);\n      }\n      \n      // If still not found, return the key itself\n      if (!translation) {\n        console.warn(`Translation not found for key: ${key}`);\n        return key;\n      }\n    }\n\n    // Replace parameters in translation\n    if (params && typeof translation === 'string') {\n      Object.keys(params).forEach(param => {\n        const placeholder = new RegExp(`{{\\\\s*${param}\\\\s*}}`, 'g');\n        translation = translation.replace(placeholder, params[param]);\n      });\n    }\n\n    return translation;\n  }\n\n  /**\n   * Get translation as observable (useful for templates)\n   */\n  get(key: string, params?: { [key: string]: any }): Observable<string> {\n    return this.currentLanguage$.pipe(\n      map(() => this.translate(key, params))\n    );\n  }\n\n  /**\n   * Get instant translation (synchronous)\n   */\n  instant(key: string, params?: { [key: string]: any }): string {\n    return this.translate(key, params);\n  }\n\n  /**\n   * Load translations for a specific language\n   */\n  private loadTranslations(language: SupportedLanguage): Observable<any> {\n    // Avoid duplicate loading\n    if (this.loadingTranslations.has(language)) {\n      return new BehaviorSubject(this.translations.get(language) || {}).asObservable();\n    }\n\n    // Return cached translations if available\n    if (this.translations.has(language)) {\n      return of(this.translations.get(language));\n    }\n\n    this.loadingTranslations.add(language);\n\n    return this.http.get(`/assets/i18n/${language}.json`).pipe(\n      tap(translations => {\n        this.translations.set(language, translations);\n        this.loadingTranslations.delete(language);\n      }),\n      catchError(error => {\n        console.error(`Failed to load translations for ${language}:`, error);\n        this.loadingTranslations.delete(language);\n        \n        // Return empty object as fallback\n        const fallbackTranslations = {};\n        this.translations.set(language, fallbackTranslations);\n        return of(fallbackTranslations);\n      })\n    );\n  }\n\n  /**\n   * Initialize language from localStorage or browser preference\n   */\n  private initializeLanguage(): void {\n    const savedLanguage = localStorage.getItem(environment.storage.languageKey);\n    const browserLanguage = this.getBrowserLanguage();\n    const defaultLanguage = environment.defaultLanguage as SupportedLanguage;\n\n    let targetLanguage: SupportedLanguage;\n\n    if (savedLanguage && this.isSupportedLanguage(savedLanguage)) {\n      targetLanguage = savedLanguage as SupportedLanguage;\n    } else if (this.isSupportedLanguage(browserLanguage)) {\n      targetLanguage = browserLanguage as SupportedLanguage;\n    } else {\n      targetLanguage = defaultLanguage;\n    }\n\n    // Load initial translations\n    this.loadTranslations(targetLanguage).subscribe(() => {\n      this.currentLanguageSubject.next(targetLanguage);\n      this.updateDocumentLanguage(targetLanguage);\n    });\n  }\n\n  /**\n   * Get browser language\n   */\n  private getBrowserLanguage(): string {\n    if (typeof navigator !== 'undefined') {\n      return navigator.language?.split('-')[0] || 'en';\n    }\n    return 'en';\n  }\n\n  /**\n   * Check if language is supported\n   */\n  private isSupportedLanguage(language: string): boolean {\n    return environment.supportedLanguages.includes(language);\n  }\n\n  /**\n   * Save language preference to localStorage\n   */\n  private saveLanguagePreference(language: SupportedLanguage): void {\n    localStorage.setItem(environment.storage.languageKey, language);\n  }\n\n  /**\n   * Update document language attribute and direction\n   */\n  private updateDocumentLanguage(language: SupportedLanguage): void {\n    if (typeof document !== 'undefined') {\n      document.documentElement.lang = language;\n      // Thai is LTR, but in case we add RTL languages in the future\n      document.documentElement.dir = 'ltr';\n    }\n  }\n\n  /**\n   * Get nested value from object using dot notation\n   */\n  private getNestedValue(obj: any, key: string): any {\n    return key.split('.').reduce((current, prop) => {\n      return current?.[prop];\n    }, obj);\n  }\n\n  /**\n   * Toggle between Thai and English\n   */\n  toggleLanguage(): Observable<any> {\n    const newLanguage: SupportedLanguage = this.currentLanguage === 'th' ? 'en' : 'th';\n    return this.setLanguage(newLanguage);\n  }\n\n  /**\n   * Get all supported languages\n   */\n  getSupportedLanguages(): Array<{ code: SupportedLanguage; name: string; nativeName: string }> {\n    return [\n      { code: 'th', name: 'Thai', nativeName: 'ไทย' },\n      { code: 'en', name: 'English', nativeName: 'English' }\n    ];\n  }\n\n  /**\n   * Check if current language is Thai\n   */\n  isThaiLanguage(): boolean {\n    return this.currentLanguage === 'th';\n  }\n\n  /**\n   * Check if current language is English\n   */\n  isEnglishLanguage(): boolean {\n    return this.currentLanguage === 'en';\n  }\n\n  /**\n   * Format number according to current locale\n   */\n  formatNumber(value: number, options?: Intl.NumberFormatOptions): string {\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    return new Intl.NumberFormat(locale, options).format(value);\n  }\n\n  /**\n   * Format currency in Thai Baht\n   */\n  formatCurrency(value: number): string {\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: 'THB',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(value);\n  }\n\n  /**\n   * Format date according to current locale\n   */\n  formatDate(date: Date | string, options?: Intl.DateTimeFormatOptions): string {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    \n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n\n    return new Intl.DateTimeFormat(locale, { ...defaultOptions, ...options }).format(dateObj);\n  }\n\n  /**\n   * Format date time according to current locale\n   */\n  formatDateTime(date: Date | string, options?: Intl.DateTimeFormatOptions): string {\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\n    const locale = this.currentLanguage === 'th' ? 'th-TH' : 'en-US';\n    \n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n\n    return new Intl.DateTimeFormat(locale, { ...defaultOptions, ...options }).format(dateObj);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}