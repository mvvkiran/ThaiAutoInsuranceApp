{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.checkAuth(state.url);\n  }\n  canActivateChild(childRoute, state) {\n    return this.checkAuth(state.url);\n  }\n  checkAuth(url) {\n    return this.authService.currentUser$.pipe(take(1), map(user => {\n      if (user) {\n        return true;\n      } else {\n        // Store the attempted URL for redirecting after login\n        this.router.navigate(['/auth/login'], {\n          queryParams: {\n            returnUrl: url\n          }\n        });\n        return false;\n      }\n    }));\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","take","AuthGuard","constructor","authService","router","canActivate","route","state","checkAuth","url","canActivateChild","childRoute","currentUser$","pipe","user","navigate","queryParams","returnUrl","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate, CanActivateChild {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    return this.checkAuth(state.url);\n  }\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    return this.checkAuth(state.url);\n  }\n\n  private checkAuth(url: string): Observable<boolean> {\n    return this.authService.currentUser$.pipe(\n      take(1),\n      map(user => {\n        if (user) {\n          return true;\n        } else {\n          // Store the attempted URL for redirecting after login\n          this.router.navigate(['/auth/login'], { \n            queryParams: { returnUrl: url }\n          });\n          return false;\n        }\n      })\n    );\n  }\n}"],"mappings":"AAGA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAM1C,OAAM,MAAOC,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,OAAO,IAAI,CAACC,SAAS,CAACD,KAAK,CAACE,GAAG,CAAC;EAClC;EAEAC,gBAAgBA,CACdC,UAAkC,EAClCJ,KAA0B;IAE1B,OAAO,IAAI,CAACC,SAAS,CAACD,KAAK,CAACE,GAAG,CAAC;EAClC;EAEQD,SAASA,CAACC,GAAW;IAC3B,OAAO,IAAI,CAACN,WAAW,CAACS,YAAY,CAACC,IAAI,CACvCb,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAACe,IAAI,IAAG;MACT,IAAIA,IAAI,EAAE;QACR,OAAO,IAAI;OACZ,MAAM;QACL;QACA,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE;UACpCC,WAAW,EAAE;YAAEC,SAAS,EAAER;UAAG;SAC9B,CAAC;QACF,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;;;uBApCWR,SAAS,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATtB,SAAS;MAAAuB,OAAA,EAATvB,SAAS,CAAAwB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}