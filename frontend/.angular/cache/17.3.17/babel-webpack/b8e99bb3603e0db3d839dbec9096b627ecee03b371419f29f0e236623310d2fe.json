{"ast":null,"code":"import { BehaviorSubject, throwError, timer } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Gender, UserRole } from '../models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    // Initialize user from localStorage if available\n    this.initializeFromStorage();\n    // Force mock user creation in development if no user exists\n    setTimeout(() => {\n      if (!this.currentUser && !environment.production) {\n        console.log('Creating mock user for development...');\n        this.initializeMockUser();\n      }\n    }, 100);\n  }\n  // Public getters\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  get isAuthenticated() {\n    return !!this.getToken() && !!this.currentUser;\n  }\n  get isAdmin() {\n    return this.currentUser?.role === 'ADMIN' || this.currentUser?.role === 'SUPER_ADMIN';\n  }\n  get userRole() {\n    return this.currentUser?.role || null;\n  }\n  // Authentication methods\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Login failed');\n      }\n      return response.data;\n    }), tap(loginResponse => {\n      this.setSession(loginResponse);\n    }), catchError(error => {\n      console.error('Login error:', error);\n      return throwError(() => error);\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Registration failed');\n      }\n      return response.data;\n    }), catchError(error => {\n      console.error('Registration error:', error);\n      return throwError(() => error);\n    }));\n  }\n  logout() {\n    this.clearSession();\n    this.currentUserSubject.next(null);\n    this.clearTokenExpirationTimer();\n    this.router.navigate(['/auth/login']);\n  }\n  refreshToken(refreshToken) {\n    const request = {\n      refreshToken\n    };\n    return this.http.post(`${this.apiUrl}/refresh-token`, request).pipe(map(response => {\n      if (!response.success || !response.data) {\n        throw new Error(response.message || 'Token refresh failed');\n      }\n      return response.data;\n    }), tap(loginResponse => {\n      this.setSession(loginResponse);\n    }), catchError(error => {\n      console.error('Token refresh error:', error);\n      this.logout();\n      return throwError(() => error);\n    }));\n  }\n  forgotPassword(email) {\n    const request = {\n      email\n    };\n    return this.http.post(`${this.apiUrl}/forgot-password`, request).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password reset request failed');\n      }\n    }), catchError(error => {\n      console.error('Forgot password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  resetPassword(token, newPassword) {\n    return this.http.post(`${this.apiUrl}/reset-password`, {\n      token,\n      newPassword\n    }).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password reset failed');\n      }\n    }), catchError(error => {\n      console.error('Reset password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  changePassword(request) {\n    return this.http.post(`${this.apiUrl}/change-password`, request).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Password change failed');\n      }\n    }), catchError(error => {\n      console.error('Change password error:', error);\n      return throwError(() => error);\n    }));\n  }\n  verifyEmail(token) {\n    return this.http.post(`${this.apiUrl}/verify-email`, {\n      token\n    }).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Email verification failed');\n      }\n    }), catchError(error => {\n      console.error('Email verification error:', error);\n      return throwError(() => error);\n    }));\n  }\n  resendVerificationEmail() {\n    return this.http.post(`${this.apiUrl}/resend-verification`, {}).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Resend verification failed');\n      }\n    }), catchError(error => {\n      console.error('Resend verification error:', error);\n      return throwError(() => error);\n    }));\n  }\n  // Token management\n  getToken() {\n    return localStorage.getItem(environment.storage.tokenKey);\n  }\n  getRefreshToken() {\n    return localStorage.getItem(`${environment.storage.tokenKey}_refresh`);\n  }\n  // Session management\n  setSession(loginResponse) {\n    const {\n      user,\n      accessToken,\n      refreshToken,\n      expiresIn\n    } = loginResponse;\n    // Calculate expiration date from duration\n    const expiresAt = new Date(Date.now() + expiresIn);\n    // Store tokens\n    localStorage.setItem(environment.storage.tokenKey, accessToken);\n    localStorage.setItem(`${environment.storage.tokenKey}_refresh`, refreshToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(user));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    // Update current user\n    this.currentUserSubject.next(user);\n    // Set token expiration timer\n    this.setTokenExpirationTimer(expiresAt);\n  }\n  clearSession() {\n    localStorage.removeItem(environment.storage.tokenKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_refresh`);\n    localStorage.removeItem(environment.storage.userKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_expires`);\n  }\n  initializeFromStorage() {\n    try {\n      const userJson = localStorage.getItem(environment.storage.userKey);\n      const token = this.getToken();\n      const expiresAtStr = localStorage.getItem(`${environment.storage.tokenKey}_expires`);\n      if (userJson && token && expiresAtStr) {\n        const user = JSON.parse(userJson);\n        const expiresAt = new Date(expiresAtStr);\n        // Check if token is still valid\n        if (expiresAt > new Date()) {\n          this.currentUserSubject.next(user);\n          this.setTokenExpirationTimer(expiresAt);\n        } else {\n          // Token expired, try to refresh\n          const refreshToken = this.getRefreshToken();\n          if (refreshToken) {\n            this.refreshToken(refreshToken).subscribe({\n              error: () => this.clearSession()\n            });\n          } else {\n            this.clearSession();\n          }\n        }\n      } else {\n        // Development mode: Create mock user if no authentication exists\n        if (!environment.production) {\n          this.initializeMockUser();\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth from storage:', error);\n      this.clearSession();\n      // Development mode: Create mock user on error\n      if (!environment.production) {\n        this.initializeMockUser();\n      }\n    }\n  }\n  initializeMockUser() {\n    const mockUser = {\n      id: 'mock-user-1',\n      email: 'customer@example.com',\n      username: 'customer123',\n      firstName: 'สมชาย',\n      lastName: 'ใจดี',\n      firstNameThai: 'สมชาย',\n      lastNameThai: 'ใจดี',\n      fullName: 'สมชาย ใจดี',\n      nationalId: '1234567890123',\n      phoneNumber: '0812345678',\n      dateOfBirth: new Date('1985-03-15'),\n      gender: Gender.MALE,\n      role: UserRole.CUSTOMER,\n      isActive: true,\n      isVerified: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: new Date(),\n      preferredLanguage: 'th'\n    };\n    // Set mock session\n    const mockToken = 'mock-jwt-token-for-development';\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    localStorage.setItem(environment.storage.tokenKey, mockToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(mockUser));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    this.currentUserSubject.next(mockUser);\n    console.log('Development mode: Mock user initialized');\n  }\n  setTokenExpirationTimer(expirationDate) {\n    this.clearTokenExpirationTimer();\n    const expiresInMs = expirationDate.getTime() - new Date().getTime();\n    if (expiresInMs > 0) {\n      // Set timer to refresh token 5 minutes before expiration\n      const refreshTime = Math.max(expiresInMs - 5 * 60 * 1000, 60000); // At least 1 minute\n      this.tokenExpirationTimer = timer(refreshTime).subscribe(() => {\n        const refreshToken = this.getRefreshToken();\n        if (refreshToken) {\n          this.refreshToken(refreshToken).subscribe({\n            error: () => this.logout()\n          });\n        } else {\n          this.logout();\n        }\n      });\n    }\n  }\n  clearTokenExpirationTimer() {\n    if (this.tokenExpirationTimer) {\n      this.tokenExpirationTimer.unsubscribe();\n      this.tokenExpirationTimer = undefined;\n    }\n  }\n  // Utility methods\n  hasPermission(permission) {\n    if (!this.currentUser) {\n      return false;\n    }\n    // Super admin has all permissions\n    if (this.currentUser.role === 'SUPER_ADMIN') {\n      return true;\n    }\n    // Add specific permission logic based on roles\n    switch (permission) {\n      case 'VIEW_ALL_POLICIES':\n      case 'VIEW_ALL_CLAIMS':\n      case 'MANAGE_USERS':\n        return this.currentUser.role === 'ADMIN';\n      case 'CREATE_POLICY':\n      case 'VIEW_OWN_POLICIES':\n      case 'CREATE_CLAIM':\n      case 'VIEW_OWN_CLAIMS':\n        return true;\n      // All authenticated users\n      default:\n        return false;\n    }\n  }\n  canAccessRoute(requiredRoles) {\n    if (!this.currentUser) {\n      return false;\n    }\n    return requiredRoles.includes(this.currentUser.role);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","timer","map","tap","catchError","environment","Gender","UserRole","AuthService","constructor","http","router","apiUrl","currentUserSubject","currentUser$","asObservable","initializeFromStorage","setTimeout","currentUser","production","console","log","initializeMockUser","value","isAuthenticated","getToken","isAdmin","role","userRole","login","credentials","post","pipe","response","success","data","Error","message","loginResponse","setSession","error","register","userData","logout","clearSession","next","clearTokenExpirationTimer","navigate","refreshToken","request","forgotPassword","email","resetPassword","token","newPassword","changePassword","verifyEmail","resendVerificationEmail","localStorage","getItem","storage","tokenKey","getRefreshToken","user","accessToken","expiresIn","expiresAt","Date","now","setItem","userKey","JSON","stringify","toString","setTokenExpirationTimer","removeItem","userJson","expiresAtStr","parse","subscribe","mockUser","id","username","firstName","lastName","firstNameThai","lastNameThai","fullName","nationalId","phoneNumber","dateOfBirth","gender","MALE","CUSTOMER","isActive","isVerified","createdAt","updatedAt","lastLoginAt","preferredLanguage","mockToken","expirationDate","expiresInMs","getTime","refreshTime","Math","max","tokenExpirationTimer","unsubscribe","undefined","hasPermission","permission","canAccessRoute","requiredRoles","includes","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError, timer } from 'rxjs';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../../environments/environment';\nimport { \n  User, \n  LoginRequest, \n  LoginResponse, \n  RegisterRequest, \n  ResetPasswordRequest,\n  ChangePasswordRequest,\n  RefreshTokenRequest,\n  ApiResponse,\n  Gender,\n  UserRole\n} from '../models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  private tokenExpirationTimer?: any;\n\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    // Initialize user from localStorage if available\n    this.initializeFromStorage();\n    \n    // Force mock user creation in development if no user exists\n    setTimeout(() => {\n      if (!this.currentUser && !environment.production) {\n        console.log('Creating mock user for development...');\n        this.initializeMockUser();\n      }\n    }, 100);\n  }\n\n  // Public getters\n  get currentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  get isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.currentUser;\n  }\n\n  get isAdmin(): boolean {\n    return this.currentUser?.role === 'ADMIN' || this.currentUser?.role === 'SUPER_ADMIN';\n  }\n\n  get userRole(): string | null {\n    return this.currentUser?.role || null;\n  }\n\n  // Authentication methods\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.http.post<ApiResponse<LoginResponse>>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Login failed');\n          }\n          return response.data;\n        }),\n        tap(loginResponse => {\n          this.setSession(loginResponse);\n        }),\n        catchError(error => {\n          console.error('Login error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  register(userData: RegisterRequest): Observable<User> {\n    return this.http.post<ApiResponse<User>>(`${this.apiUrl}/register`, userData)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Registration failed');\n          }\n          return response.data;\n        }),\n        catchError(error => {\n          console.error('Registration error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  logout(): void {\n    this.clearSession();\n    this.currentUserSubject.next(null);\n    this.clearTokenExpirationTimer();\n    this.router.navigate(['/auth/login']);\n  }\n\n  refreshToken(refreshToken: string): Observable<LoginResponse> {\n    const request: RefreshTokenRequest = { refreshToken };\n    \n    return this.http.post<ApiResponse<LoginResponse>>(`${this.apiUrl}/refresh-token`, request)\n      .pipe(\n        map(response => {\n          if (!response.success || !response.data) {\n            throw new Error(response.message || 'Token refresh failed');\n          }\n          return response.data;\n        }),\n        tap(loginResponse => {\n          this.setSession(loginResponse);\n        }),\n        catchError(error => {\n          console.error('Token refresh error:', error);\n          this.logout();\n          return throwError(() => error);\n        })\n      );\n  }\n\n  forgotPassword(email: string): Observable<void> {\n    const request: ResetPasswordRequest = { email };\n    \n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/forgot-password`, request)\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password reset request failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Forgot password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/reset-password`, {\n      token,\n      newPassword\n    })\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password reset failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Reset password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  changePassword(request: ChangePasswordRequest): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/change-password`, request)\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Password change failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Change password error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  verifyEmail(token: string): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/verify-email`, { token })\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Email verification failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Email verification error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  resendVerificationEmail(): Observable<void> {\n    return this.http.post<ApiResponse<void>>(`${this.apiUrl}/resend-verification`, {})\n      .pipe(\n        map(response => {\n          if (!response.success) {\n            throw new Error(response.message || 'Resend verification failed');\n          }\n        }),\n        catchError(error => {\n          console.error('Resend verification error:', error);\n          return throwError(() => error);\n        })\n      );\n  }\n\n  // Token management\n  getToken(): string | null {\n    return localStorage.getItem(environment.storage.tokenKey);\n  }\n\n  getRefreshToken(): string | null {\n    return localStorage.getItem(`${environment.storage.tokenKey}_refresh`);\n  }\n\n  // Session management\n  private setSession(loginResponse: LoginResponse): void {\n    const { user, accessToken, refreshToken, expiresIn } = loginResponse;\n    \n    // Calculate expiration date from duration\n    const expiresAt = new Date(Date.now() + expiresIn);\n    \n    // Store tokens\n    localStorage.setItem(environment.storage.tokenKey, accessToken);\n    localStorage.setItem(`${environment.storage.tokenKey}_refresh`, refreshToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(user));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    \n    // Update current user\n    this.currentUserSubject.next(user);\n    \n    // Set token expiration timer\n    this.setTokenExpirationTimer(expiresAt);\n  }\n\n  private clearSession(): void {\n    localStorage.removeItem(environment.storage.tokenKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_refresh`);\n    localStorage.removeItem(environment.storage.userKey);\n    localStorage.removeItem(`${environment.storage.tokenKey}_expires`);\n  }\n\n  private initializeFromStorage(): void {\n    try {\n      const userJson = localStorage.getItem(environment.storage.userKey);\n      const token = this.getToken();\n      const expiresAtStr = localStorage.getItem(`${environment.storage.tokenKey}_expires`);\n\n      if (userJson && token && expiresAtStr) {\n        const user = JSON.parse(userJson) as User;\n        const expiresAt = new Date(expiresAtStr);\n\n        // Check if token is still valid\n        if (expiresAt > new Date()) {\n          this.currentUserSubject.next(user);\n          this.setTokenExpirationTimer(expiresAt);\n        } else {\n          // Token expired, try to refresh\n          const refreshToken = this.getRefreshToken();\n          if (refreshToken) {\n            this.refreshToken(refreshToken).subscribe({\n              error: () => this.clearSession()\n            });\n          } else {\n            this.clearSession();\n          }\n        }\n      } else {\n        // Development mode: Create mock user if no authentication exists\n        if (!environment.production) {\n          this.initializeMockUser();\n        }\n      }\n    } catch (error) {\n      console.error('Error initializing auth from storage:', error);\n      this.clearSession();\n      // Development mode: Create mock user on error\n      if (!environment.production) {\n        this.initializeMockUser();\n      }\n    }\n  }\n\n  private initializeMockUser(): void {\n    const mockUser: User = {\n      id: 'mock-user-1',\n      email: 'customer@example.com',\n      username: 'customer123',\n      firstName: 'สมชาย',\n      lastName: 'ใจดี',\n      firstNameThai: 'สมชาย',\n      lastNameThai: 'ใจดี',\n      fullName: 'สมชาย ใจดี',\n      nationalId: '1234567890123',\n      phoneNumber: '0812345678',\n      dateOfBirth: new Date('1985-03-15'),\n      gender: Gender.MALE,\n      role: UserRole.CUSTOMER,\n      isActive: true,\n      isVerified: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastLoginAt: new Date(),\n      preferredLanguage: 'th'\n    };\n\n    // Set mock session\n    const mockToken = 'mock-jwt-token-for-development';\n    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n    \n    localStorage.setItem(environment.storage.tokenKey, mockToken);\n    localStorage.setItem(environment.storage.userKey, JSON.stringify(mockUser));\n    localStorage.setItem(`${environment.storage.tokenKey}_expires`, expiresAt.toString());\n    \n    this.currentUserSubject.next(mockUser);\n    console.log('Development mode: Mock user initialized');\n  }\n\n  private setTokenExpirationTimer(expirationDate: Date): void {\n    this.clearTokenExpirationTimer();\n    \n    const expiresInMs = expirationDate.getTime() - new Date().getTime();\n    \n    if (expiresInMs > 0) {\n      // Set timer to refresh token 5 minutes before expiration\n      const refreshTime = Math.max(expiresInMs - (5 * 60 * 1000), 60000); // At least 1 minute\n      \n      this.tokenExpirationTimer = timer(refreshTime).subscribe(() => {\n        const refreshToken = this.getRefreshToken();\n        if (refreshToken) {\n          this.refreshToken(refreshToken).subscribe({\n            error: () => this.logout()\n          });\n        } else {\n          this.logout();\n        }\n      });\n    }\n  }\n\n  private clearTokenExpirationTimer(): void {\n    if (this.tokenExpirationTimer) {\n      this.tokenExpirationTimer.unsubscribe();\n      this.tokenExpirationTimer = undefined;\n    }\n  }\n\n  // Utility methods\n  hasPermission(permission: string): boolean {\n    if (!this.currentUser) {\n      return false;\n    }\n\n    // Super admin has all permissions\n    if (this.currentUser.role === 'SUPER_ADMIN') {\n      return true;\n    }\n\n    // Add specific permission logic based on roles\n    switch (permission) {\n      case 'VIEW_ALL_POLICIES':\n      case 'VIEW_ALL_CLAIMS':\n      case 'MANAGE_USERS':\n        return this.currentUser.role === 'ADMIN';\n      \n      case 'CREATE_POLICY':\n      case 'VIEW_OWN_POLICIES':\n      case 'CREATE_CLAIM':\n      case 'VIEW_OWN_CLAIMS':\n        return true; // All authenticated users\n      \n      default:\n        return false;\n    }\n  }\n\n  canAccessRoute(requiredRoles: string[]): boolean {\n    if (!this.currentUser) {\n      return false;\n    }\n\n    return requiredRoles.includes(this.currentUser.role);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}