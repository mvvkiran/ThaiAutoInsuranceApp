{"ast":null,"code":"import { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\nexport class LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n  }\n  intercept(req, next) {\n    // Skip loading indicator for certain requests\n    if (this.shouldSkipLoading(req)) {\n      return next.handle(req);\n    }\n    // Generate unique loading key based on request\n    const loadingKey = this.generateLoadingKey(req);\n    // Start loading\n    this.loadingService.setLoading(loadingKey, true);\n    return next.handle(req).pipe(finalize(() => {\n      // Stop loading when request completes (success or error)\n      this.loadingService.setLoading(loadingKey, false);\n    }));\n  }\n  shouldSkipLoading(req) {\n    // Skip loading for certain requests to avoid UI flickering\n    const skipLoadingEndpoints = ['/auth/refresh-token', '/notifications/count', '/heartbeat', '/health'];\n    // Skip if request has custom header to disable loading\n    if (req.headers.has('X-Skip-Loading')) {\n      return true;\n    }\n    // Skip for specific endpoints\n    return skipLoadingEndpoints.some(endpoint => req.url.includes(endpoint));\n  }\n  generateLoadingKey(req) {\n    // Create a unique key for the request\n    // This allows tracking multiple concurrent requests independently\n    const method = req.method;\n    const url = req.url.replace(/\\/\\d+/g, '/:id'); // Replace IDs with placeholder\n    return `${method}:${url}`;\n  }\n  static {\n    this.ɵfac = function LoadingInterceptor_Factory(t) {\n      return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingInterceptor,\n      factory: LoadingInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["finalize","LoadingInterceptor","constructor","loadingService","intercept","req","next","shouldSkipLoading","handle","loadingKey","generateLoadingKey","setLoading","pipe","skipLoadingEndpoints","headers","has","some","endpoint","url","includes","method","replace","i0","ɵɵinject","i1","LoadingService","factory","ɵfac"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/core/interceptors/loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { LoadingService } from '../services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n  constructor(private loadingService: LoadingService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Skip loading indicator for certain requests\n    if (this.shouldSkipLoading(req)) {\n      return next.handle(req);\n    }\n\n    // Generate unique loading key based on request\n    const loadingKey = this.generateLoadingKey(req);\n    \n    // Start loading\n    this.loadingService.setLoading(loadingKey, true);\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        // Stop loading when request completes (success or error)\n        this.loadingService.setLoading(loadingKey, false);\n      })\n    );\n  }\n\n  private shouldSkipLoading(req: HttpRequest<any>): boolean {\n    // Skip loading for certain requests to avoid UI flickering\n    const skipLoadingEndpoints = [\n      '/auth/refresh-token',\n      '/notifications/count',\n      '/heartbeat',\n      '/health'\n    ];\n\n    // Skip if request has custom header to disable loading\n    if (req.headers.has('X-Skip-Loading')) {\n      return true;\n    }\n\n    // Skip for specific endpoints\n    return skipLoadingEndpoints.some(endpoint => req.url.includes(endpoint));\n  }\n\n  private generateLoadingKey(req: HttpRequest<any>): string {\n    // Create a unique key for the request\n    // This allows tracking multiple concurrent requests independently\n    const method = req.method;\n    const url = req.url.replace(/\\/\\d+/g, '/:id'); // Replace IDs with placeholder\n    \n    return `${method}:${url}`;\n  }\n}"],"mappings":"AAGA,SAASA,QAAQ,QAAQ,gBAAgB;;;AAIzC,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB;EAErDC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,IAAI,IAAI,CAACC,iBAAiB,CAACF,GAAG,CAAC,EAAE;MAC/B,OAAOC,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC;;IAGzB;IACA,MAAMI,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAACL,GAAG,CAAC;IAE/C;IACA,IAAI,CAACF,cAAc,CAACQ,UAAU,CAACF,UAAU,EAAE,IAAI,CAAC;IAEhD,OAAOH,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC,CAACO,IAAI,CAC1BZ,QAAQ,CAAC,MAAK;MACZ;MACA,IAAI,CAACG,cAAc,CAACQ,UAAU,CAACF,UAAU,EAAE,KAAK,CAAC;IACnD,CAAC,CAAC,CACH;EACH;EAEQF,iBAAiBA,CAACF,GAAqB;IAC7C;IACA,MAAMQ,oBAAoB,GAAG,CAC3B,qBAAqB,EACrB,sBAAsB,EACtB,YAAY,EACZ,SAAS,CACV;IAED;IACA,IAAIR,GAAG,CAACS,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,EAAE;MACrC,OAAO,IAAI;;IAGb;IACA,OAAOF,oBAAoB,CAACG,IAAI,CAACC,QAAQ,IAAIZ,GAAG,CAACa,GAAG,CAACC,QAAQ,CAACF,QAAQ,CAAC,CAAC;EAC1E;EAEQP,kBAAkBA,CAACL,GAAqB;IAC9C;IACA;IACA,MAAMe,MAAM,GAAGf,GAAG,CAACe,MAAM;IACzB,MAAMF,GAAG,GAAGb,GAAG,CAACa,GAAG,CAACG,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAE/C,OAAO,GAAGD,MAAM,IAAIF,GAAG,EAAE;EAC3B;;;uBAjDWjB,kBAAkB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAlBxB,kBAAkB;MAAAyB,OAAA,EAAlBzB,kBAAkB,CAAA0B;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}