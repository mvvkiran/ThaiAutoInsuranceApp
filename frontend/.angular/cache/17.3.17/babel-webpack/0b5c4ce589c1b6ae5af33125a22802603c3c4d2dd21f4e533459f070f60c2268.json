{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NumericOnlyDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n  }\n  onKeyDown(event) {\n    // Allow backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].indexOf(event.keyCode) !== -1 ||\n    // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n    event.keyCode === 65 && event.ctrlKey || event.keyCode === 67 && event.ctrlKey || event.keyCode === 86 && event.ctrlKey || event.keyCode === 88 && event.ctrlKey ||\n    // Allow home, end, left, right\n    event.keyCode >= 35 && event.keyCode <= 39) {\n      return true;\n    }\n    // Ensure it's a number and stop keypress\n    if ((event.shiftKey || event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {\n      event.preventDefault();\n      return false;\n    }\n    return true;\n  }\n  static {\n    this.ɵfac = function NumericOnlyDirective_Factory(t) {\n      return new (t || NumericOnlyDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: NumericOnlyDirective,\n      selectors: [[\"\", \"appNumericOnly\", \"\"]],\n      hostBindings: function NumericOnlyDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function NumericOnlyDirective_keydown_HostBindingHandler($event) {\n            return ctx.onKeyDown($event);\n          });\n        }\n      }\n    });\n  }\n}","map":{"version":3,"names":["NumericOnlyDirective","constructor","elementRef","onKeyDown","event","indexOf","keyCode","ctrlKey","shiftKey","preventDefault","i0","ɵɵdirectiveInject","ElementRef","selectors","hostBindings","NumericOnlyDirective_HostBindings","rf","ctx","ɵɵlistener","NumericOnlyDirective_keydown_HostBindingHandler","$event"],"sources":["/Users/mvvkiran/Workspace/Angular/auto-insurance-app/frontend/src/app/shared/directives/numeric-only.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: '[appNumericOnly]'\n})\nexport class NumericOnlyDirective {\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): boolean {\n    // Allow backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].indexOf(event.keyCode) !== -1 ||\n        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n        (event.keyCode === 65 && event.ctrlKey) ||\n        (event.keyCode === 67 && event.ctrlKey) ||\n        (event.keyCode === 86 && event.ctrlKey) ||\n        (event.keyCode === 88 && event.ctrlKey) ||\n        // Allow home, end, left, right\n        (event.keyCode >= 35 && event.keyCode <= 39)) {\n      return true;\n    }\n    \n    // Ensure it's a number and stop keypress\n    if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && \n        (event.keyCode < 96 || event.keyCode > 105)) {\n      event.preventDefault();\n      return false;\n    }\n    \n    return true;\n  }\n}"],"mappings":";AAKA,OAAM,MAAOA,oBAAoB;EAC/BC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAG7CC,SAASA,CAACC,KAAoB;IAC5B;IACA,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAACC,OAAO,CAACD,KAAK,CAACE,OAAO,CAAC,KAAK,CAAC,CAAC;IAChD;IACCF,KAAK,CAACE,OAAO,KAAK,EAAE,IAAIF,KAAK,CAACG,OAAQ,IACtCH,KAAK,CAACE,OAAO,KAAK,EAAE,IAAIF,KAAK,CAACG,OAAQ,IACtCH,KAAK,CAACE,OAAO,KAAK,EAAE,IAAIF,KAAK,CAACG,OAAQ,IACtCH,KAAK,CAACE,OAAO,KAAK,EAAE,IAAIF,KAAK,CAACG,OAAQ;IACvC;IACCH,KAAK,CAACE,OAAO,IAAI,EAAE,IAAIF,KAAK,CAACE,OAAO,IAAI,EAAG,EAAE;MAChD,OAAO,IAAI;;IAGb;IACA,IAAI,CAACF,KAAK,CAACI,QAAQ,IAAKJ,KAAK,CAACE,OAAO,GAAG,EAAE,IAAIF,KAAK,CAACE,OAAO,GAAG,EAAG,MAC5DF,KAAK,CAACE,OAAO,GAAG,EAAE,IAAIF,KAAK,CAACE,OAAO,GAAG,GAAG,CAAC,EAAE;MAC/CF,KAAK,CAACK,cAAc,EAAE;MACtB,OAAO,KAAK;;IAGd,OAAO,IAAI;EACb;;;uBAzBWT,oBAAoB,EAAAU,EAAA,CAAAC,iBAAA,CAAAD,EAAA,CAAAE,UAAA;IAAA;EAAA;;;YAApBZ,oBAAoB;MAAAa,SAAA;MAAAC,YAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UAApBN,EAAA,CAAAQ,UAAA,qBAAAC,gDAAAC,MAAA;YAAA,OAAAH,GAAA,CAAAd,SAAA,CAAAiB,MAAA,CAAiB;UAAA,EAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}