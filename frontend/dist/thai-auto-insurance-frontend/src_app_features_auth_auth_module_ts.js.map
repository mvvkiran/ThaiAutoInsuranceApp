{"version":3,"file":"src_app_features_auth_auth_module_ts.js","mappings":"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","sources":["./src/app/features/auth/auth.module.ts","./src/app/features/auth/forgot-password/forgot-password.component.ts","./src/app/features/auth/login/login.component.ts","./src/app/features/auth/login/login.component.html","./src/app/features/auth/register/register.component.ts","./src/app/features/auth/reset-password/reset-password.component.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'forgot-password', component: ForgotPasswordComponent },\n  { path: 'reset-password', component: ResetPasswordComponent }\n];\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ]\n})\nexport class AuthModule { }","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-forgot-password',\n  template: `\n    <div class=\"forgot-password-container\">\n      <h2>Forgot Password</h2>\n      <p>Password reset form will be implemented here</p>\n      <a routerLink=\"/auth/login\">Back to Login</a>\n    </div>\n  `,\n  styles: [`\n    .forgot-password-container {\n      padding: 20px;\n      text-align: center;\n    }\n  `]\n})\nexport class ForgotPasswordComponent { }","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../core/services/auth.service';\nimport { TranslationService } from '../../../core/services/translation.service';\nimport { NotificationService } from '../../../core/services/notification.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  isLoading = false;\n  hidePassword = true;\n  returnUrl = '/dashboard';\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    public translationService: TranslationService,\n    private notificationService: NotificationService\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      rememberMe: [false]\n    });\n  }\n\n  ngOnInit(): void {\n    // Get return URL from route parameters or default to dashboard\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';\n    \n    // If already authenticated, redirect\n    if (this.authService.isAuthenticated) {\n      this.router.navigate([this.returnUrl]);\n    }\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid && !this.isLoading) {\n      this.isLoading = true;\n      const formValue = this.loginForm.value;\n      const credentials = {\n        usernameOrEmail: formValue.username,\n        password: formValue.password,\n        rememberMe: formValue.rememberMe\n      };\n\n      this.authService.login(credentials).subscribe({\n        next: (response) => {\n          this.notificationService.showSuccess(\n            this.translationService.instant('auth.loginSuccess')\n          );\n          this.router.navigate([this.returnUrl]);\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.notificationService.showError(\n            error.message || this.translationService.instant('auth.loginFailed')\n          );\n        },\n        complete: () => {\n          this.isLoading = false;\n        }\n      });\n    } else {\n      this.markFormGroupTouched();\n    }\n  }\n\n  private markFormGroupTouched(): void {\n    Object.keys(this.loginForm.controls).forEach(key => {\n      const control = this.loginForm.get(key);\n      if (control) {\n        control.markAsTouched();\n      }\n    });\n  }\n\n  getErrorMessage(fieldName: string): string {\n    const control = this.loginForm.get(fieldName);\n    if (control && control.errors && control.touched) {\n      if (control.errors['required']) {\n        return this.translationService.instant('validation.required');\n      }\n      if (control.errors['username']) {\n        return this.translationService.instant('validation.required');\n      }\n      if (control.errors['minlength']) {\n        return this.translationService.instant('validation.minLength', \n          { min: control.errors['minlength'].requiredLength });\n      }\n    }\n    return '';\n  }\n}","<div class=\"login-container\">\n  <div class=\"login-card\">\n    <mat-card class=\"login-form-card\">\n      \n      <!-- Logo and Title -->\n      <mat-card-header class=\"login-header\">\n        <div class=\"login-logo\">\n          <mat-icon class=\"logo-icon\">directions_car</mat-icon>\n          <h1 class=\"app-title\">{{ 'common.appName' | translate }}</h1>\n        </div>\n        <p class=\"login-subtitle\">{{ 'auth.loginSubtitle' | translate }}</p>\n      </mat-card-header>\n\n      <!-- Login Form -->\n      <mat-card-content>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\n          \n          <!-- Username/Email Field -->\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\n            <mat-label>{{ 'auth.usernameOrEmail' | translate }}</mat-label>\n            <input matInput \n                   type=\"text\" \n                   formControlName=\"username\"\n                   [placeholder]=\"'auth.usernameOrEmailPlaceholder' | translate\"\n                   appAutofocus>\n            <mat-icon matSuffix>person</mat-icon>\n            <mat-error>{{ getErrorMessage('username') }}</mat-error>\n          </mat-form-field>\n\n          <!-- Password Field -->\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\n            <mat-label>{{ 'auth.password' | translate }}</mat-label>\n            <input matInput \n                   [type]=\"hidePassword ? 'password' : 'text'\" \n                   formControlName=\"password\"\n                   [placeholder]=\"'auth.passwordPlaceholder' | translate\">\n            <button mat-icon-button \n                    matSuffix \n                    type=\"button\"\n                    (click)=\"hidePassword = !hidePassword\"\n                    [attr.aria-label]=\"'auth.togglePassword' | translate\">\n              <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n            </button>\n            <mat-error>{{ getErrorMessage('password') }}</mat-error>\n          </mat-form-field>\n\n          <!-- Remember Me -->\n          <div class=\"login-options\">\n            <mat-checkbox formControlName=\"rememberMe\">\n              {{ 'auth.rememberMe' | translate }}\n            </mat-checkbox>\n            \n            <a routerLink=\"/auth/forgot-password\" class=\"forgot-password-link\">\n              {{ 'auth.forgotPassword' | translate }}\n            </a>\n          </div>\n\n          <!-- Submit Button -->\n          <button mat-raised-button \n                  color=\"primary\" \n                  type=\"submit\"\n                  class=\"login-button full-width\"\n                  [disabled]=\"isLoading\">\n            <mat-spinner diameter=\"20\" \n                        strokeWidth=\"2\" \n                        *ngIf=\"isLoading\"></mat-spinner>\n            <span *ngIf=\"!isLoading\">{{ 'auth.login' | translate }}</span>\n            <span *ngIf=\"isLoading\">{{ 'common.loading' | translate }}</span>\n          </button>\n\n        </form>\n      </mat-card-content>\n\n      <!-- Footer -->\n      <mat-card-actions class=\"login-footer\">\n        <div class=\"register-section\">\n          <span class=\"register-text\">{{ 'auth.noAccount' | translate }}</span>\n          <a routerLink=\"/auth/register\" class=\"register-link\">\n            {{ 'auth.register' | translate }}\n          </a>\n        </div>\n      </mat-card-actions>\n\n    </mat-card>\n  </div>\n\n  <!-- Language Toggle -->\n  <div class=\"language-toggle\">\n    <button mat-icon-button \n            (click)=\"translationService.toggleLanguage()\"\n            class=\"language-btn\">\n      <mat-icon>translate</mat-icon>\n      <span class=\"language-text\">{{ translationService.currentLanguage === 'th' ? 'EN' : 'TH' }}</span>\n    </button>\n  </div>\n\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  template: `\n    <div class=\"register-container\">\n      <h2>Register Component</h2>\n      <p>Registration form will be implemented here</p>\n      <a routerLink=\"/auth/login\">Back to Login</a>\n    </div>\n  `,\n  styles: [`\n    .register-container {\n      padding: 20px;\n      text-align: center;\n    }\n  `]\n})\nexport class RegisterComponent { }","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-reset-password',\n  template: `\n    <div class=\"reset-password-container\">\n      <h2>Reset Password</h2>\n      <p>Password reset form will be implemented here</p>\n      <a routerLink=\"/auth/login\">Back to Login</a>\n    </div>\n  `,\n  styles: [`\n    .reset-password-container {\n      padding: 20px;\n      text-align: center;\n    }\n  `]\n})\nexport class ResetPasswordComponent { }"],"names":["CommonModule","RouterModule","SharedModule","LoginComponent","RegisterComponent","ForgotPasswordComponent","ResetPasswordComponent","routes","path","redirectTo","pathMatch","component","AuthModule","forChild","declarations","imports","i1","selectors","decls","vars","consts","template","ForgotPasswordComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","Validators","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵpipeBind1","constructor","fb","authService","router","route","translationService","notificationService","isLoading","hidePassword","returnUrl","loginForm","group","username","required","password","minLength","rememberMe","ngOnInit","snapshot","queryParams","isAuthenticated","navigate","onSubmit","valid","formValue","value","credentials","usernameOrEmail","login","subscribe","next","response","showSuccess","instant","error","showError","message","complete","markFormGroupTouched","Object","keys","controls","forEach","key","control","get","markAsTouched","getErrorMessage","fieldName","errors","touched","min","requiredLength","ɵɵdirectiveInject","FormBuilder","i2","AuthService","i3","Router","ActivatedRoute","i4","TranslationService","i5","NotificationService","LoginComponent_Template","ɵɵlistener","LoginComponent_Template_form_ngSubmit_14_listener","LoginComponent_Template_button_click_31_listener","ɵɵtemplate","LoginComponent_mat_spinner_45_Template","LoginComponent_span_46_Template","LoginComponent_span_47_Template","LoginComponent_Template_button_click_57_listener","toggleLanguage","ɵɵproperty","ɵɵtextInterpolate1","currentLanguage","RegisterComponent_Template","ResetPasswordComponent_Template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}