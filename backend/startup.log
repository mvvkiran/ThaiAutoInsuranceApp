
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

2025-08-26 00:41:00 [main] INFO  c.t.a.ThaiAutoInsuranceApplication - Starting ThaiAutoInsuranceApplication v1.0.0 using Java 24.0.2 with PID 87127 (/Users/mvvkiran/Workspace/Angular/auto-insurance-app/backend/target/auto-insurance-backend-1.0.0.jar started by mvvkiran in /Users/mvvkiran/Workspace/Angular/auto-insurance-app/backend)
2025-08-26 00:41:00 [main] DEBUG c.t.a.ThaiAutoInsuranceApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-08-26 00:41:00 [main] INFO  c.t.a.ThaiAutoInsuranceApplication - The following 1 profile is active: "dev"
2025-08-26 00:41:01 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-26 00:41:01 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 6 JPA repository interfaces.
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::load has been called by org.apache.tomcat.jni.Library in an unnamed module (jar:nested:/Users/mvvkiran/Workspace/Angular/auto-insurance-app/backend/target/auto-insurance-backend-1.0.0.jar/!BOOT-INF/lib/tomcat-embed-core-10.1.16.jar!/)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled

2025-08-26 00:41:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-08-26 00:41:01 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-08-26 00:41:01 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-08-26 00:41:01 [main] INFO  o.a.c.c.C.[.[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-08-26 00:41:01 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 965 ms
2025-08-26 00:41:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-08-26 00:41:01 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:thai_auto_insurance_dev user=SA
2025-08-26 00:41:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-08-26 00:41:01 [main] INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:thai_auto_insurance_dev'
2025-08-26 00:41:01 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-26 00:41:01 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-08-26 00:41:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-08-26 00:41:02 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-26 00:41:02 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists claim_documents cascade 
Hibernate: 
    drop table if exists claim_documents cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists claims cascade 
Hibernate: 
    drop table if exists claims cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists customers cascade 
Hibernate: 
    drop table if exists customers cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
Hibernate: 
    drop table if exists payments cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists policies cascade 
Hibernate: 
    drop table if exists policies cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vehicles cascade 
Hibernate: 
    drop table if exists vehicles cascade 
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table claim_documents (
        is_required boolean not null,
        is_verified boolean not null,
        claim_id bigint not null,
        created_at timestamp(6) not null,
        file_size bigint,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        uploaded_by bigint,
        version bigint,
        content_type varchar(100) not null,
        description varchar(500),
        file_path varchar(500) not null,
        document_type varchar(255) not null check (document_type in ('POLICE_REPORT','DAMAGE_PHOTOS','REPAIR_ESTIMATE','MEDICAL_REPORT','DRIVING_LICENSE','VEHICLE_REGISTRATION','INSURANCE_CERTIFICATE','WITNESS_STATEMENT','PHOTO','VIDEO','OTHER')),
        file_name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table claim_documents (
        is_required boolean not null,
        is_verified boolean not null,
        claim_id bigint not null,
        created_at timestamp(6) not null,
        file_size bigint,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        uploaded_by bigint,
        version bigint,
        content_type varchar(100) not null,
        description varchar(500),
        file_path varchar(500) not null,
        document_type varchar(255) not null check (document_type in ('POLICE_REPORT','DAMAGE_PHOTOS','REPAIR_ESTIMATE','MEDICAL_REPORT','DRIVING_LICENSE','VEHICLE_REGISTRATION','INSURANCE_CERTIFICATE','WITNESS_STATEMENT','PHOTO','VIDEO','OTHER')),
        file_name varchar(255) not null,
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table claims (
        approved_amount numeric(12,2),
        approved_date date,
        are_passengers_injured boolean not null,
        claimed_amount numeric(12,2),
        closed_date date,
        estimate_date date,
        estimated_damage_amount numeric(12,2),
        incident_date date not null,
        investigated_date date,
        is_driver_injured boolean not null,
        is_third_party_injured boolean not null,
        paid_amount numeric(12,2),
        rejected_date date,
        reported_date date not null,
        review_start_date date,
        settlement_amount numeric(12,2),
        settlement_date date,
        surveyor_assigned_date date,
        third_party_involved boolean not null,
        adjuster_id bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        incident_time timestamp(6),
        policy_id bigint not null,
        updated_at timestamp(6),
        version bigint,
        emergency_contact_phone varchar(20),
        surveyor_phone varchar(20),
        claim_number varchar(50) not null unique,
        police_report_number varchar(50),
        emergency_contact_name varchar(200),
        surveyor_name varchar(200),
        witness_name varchar(200),
        emergency_contact_info varchar(500),
        incident_location varchar(500) not null,
        third_party_contact_info varchar(500),
        witness_contact_info varchar(500),
        rejection_reason varchar(1000),
        third_party_details varchar(1000),
        adjuster_notes varchar(2000),
        settlement_notes varchar(2000),
        additional_remarks TEXT,
        incident_type varchar(255) not null check (incident_type in ('COLLISION','THEFT','FIRE','FLOOD','VANDALISM','NATURAL_DISASTER','PERSONAL_ACCIDENT','THIRD_PARTY_PROPERTY','OTHER')),
        injury_details TEXT,
        priority_level varchar(255) check (priority_level in ('LOW','NORMAL','MEDIUM','HIGH','URGENT')),
        repair_details TEXT,
        status varchar(255) not null check (status in ('SUBMITTED','UNDER_REVIEW','UNDER_INVESTIGATION','PENDING_DOCUMENTS','APPROVED','REJECTED','SETTLED','CLOSED')),
        incident_description clob not null,
        primary key (id)
    )
Hibernate: 
    create table claims (
        approved_amount numeric(12,2),
        approved_date date,
        are_passengers_injured boolean not null,
        claimed_amount numeric(12,2),
        closed_date date,
        estimate_date date,
        estimated_damage_amount numeric(12,2),
        incident_date date not null,
        investigated_date date,
        is_driver_injured boolean not null,
        is_third_party_injured boolean not null,
        paid_amount numeric(12,2),
        rejected_date date,
        reported_date date not null,
        review_start_date date,
        settlement_amount numeric(12,2),
        settlement_date date,
        surveyor_assigned_date date,
        third_party_involved boolean not null,
        adjuster_id bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        incident_time timestamp(6),
        policy_id bigint not null,
        updated_at timestamp(6),
        version bigint,
        emergency_contact_phone varchar(20),
        surveyor_phone varchar(20),
        claim_number varchar(50) not null unique,
        police_report_number varchar(50),
        emergency_contact_name varchar(200),
        surveyor_name varchar(200),
        witness_name varchar(200),
        emergency_contact_info varchar(500),
        incident_location varchar(500) not null,
        third_party_contact_info varchar(500),
        witness_contact_info varchar(500),
        rejection_reason varchar(1000),
        third_party_details varchar(1000),
        adjuster_notes varchar(2000),
        settlement_notes varchar(2000),
        additional_remarks TEXT,
        incident_type varchar(255) not null check (incident_type in ('COLLISION','THEFT','FIRE','FLOOD','VANDALISM','NATURAL_DISASTER','PERSONAL_ACCIDENT','THIRD_PARTY_PROPERTY','OTHER')),
        injury_details TEXT,
        priority_level varchar(255) check (priority_level in ('LOW','NORMAL','MEDIUM','HIGH','URGENT')),
        repair_details TEXT,
        status varchar(255) not null check (status in ('SUBMITTED','UNDER_REVIEW','UNDER_INVESTIGATION','PENDING_DOCUMENTS','APPROVED','REJECTED','SETTLED','CLOSED')),
        incident_description clob not null,
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table customers (
        date_of_birth date,
        is_active boolean not null,
        kyc_verified_at date,
        monthly_income float(53),
        postal_code varchar(5),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint unique,
        version bigint,
        phone_number varchar(10) not null,
        national_id varchar(13) not null unique,
        amphoe varchar(100),
        country varchar(100),
        district varchar(100),
        email varchar(100),
        first_name_en varchar(100),
        first_name_thai varchar(100),
        last_name_en varchar(100),
        last_name_thai varchar(100),
        occupation_detail varchar(100),
        province varchar(100),
        tambon varchar(100),
        address varchar(500),
        address_line1 varchar(255),
        address_line2 varchar(255),
        first_name varchar(255) not null,
        gender varchar(255) check (gender in ('MALE','FEMALE','OTHER')),
        kyc_status varchar(255) not null check (kyc_status in ('PENDING','VERIFIED','REJECTED','EXPIRED')),
        last_name varchar(255) not null,
        occupation_category varchar(255) check (occupation_category in ('GOVERNMENT_OFFICER','PRIVATE_EMPLOYEE','BUSINESS_OWNER','FREELANCER','STUDENT','RETIRED','UNEMPLOYED','OTHER')),
        preferred_language varchar(255) check (preferred_language in ('THAI','ENGLISH')),
        primary key (id)
    )
Hibernate: 
    create table customers (
        date_of_birth date,
        is_active boolean not null,
        kyc_verified_at date,
        monthly_income float(53),
        postal_code varchar(5),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint unique,
        version bigint,
        phone_number varchar(10) not null,
        national_id varchar(13) not null unique,
        amphoe varchar(100),
        country varchar(100),
        district varchar(100),
        email varchar(100),
        first_name_en varchar(100),
        first_name_thai varchar(100),
        last_name_en varchar(100),
        last_name_thai varchar(100),
        occupation_detail varchar(100),
        province varchar(100),
        tambon varchar(100),
        address varchar(500),
        address_line1 varchar(255),
        address_line2 varchar(255),
        first_name varchar(255) not null,
        gender varchar(255) check (gender in ('MALE','FEMALE','OTHER')),
        kyc_status varchar(255) not null check (kyc_status in ('PENDING','VERIFIED','REJECTED','EXPIRED')),
        last_name varchar(255) not null,
        occupation_category varchar(255) check (occupation_category in ('GOVERNMENT_OFFICER','PRIVATE_EMPLOYEE','BUSINESS_OWNER','FREELANCER','STUDENT','RETIRED','UNEMPLOYED','OTHER')),
        preferred_language varchar(255) check (preferred_language in ('THAI','ENGLISH')),
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table payments (
        amount numeric(12,2) not null,
        credit_card_last4 varchar(4),
        due_date date,
        confirmed_date timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        original_payment_id bigint,
        payment_date timestamp(6),
        policy_id bigint not null,
        processed_at timestamp(6),
        processed_by bigint,
        updated_at timestamp(6),
        version bigint,
        bank_code varchar(10),
        account_number varchar(20),
        bank_account_number varchar(20),
        payment_reference varchar(50) not null unique,
        promptpay_ref varchar(50),
        bank_name varchar(100),
        credit_card_holder_name varchar(100),
        reference_number varchar(100),
        transaction_id varchar(100),
        failure_reason varchar(500),
        promptpay_qr_code varchar(500),
        slip_image_path varchar(500),
        gateway_response varchar(1000),
        notes varchar(1000),
        payment_method varchar(255) not null check (payment_method in ('CREDIT_CARD','DEBIT_CARD','BANK_TRANSFER','PROMPTPAY','QR_CODE','CASH','CHEQUE')),
        payment_type varchar(255) not null check (payment_type in ('PREMIUM','REFUND','CLAIM_SETTLEMENT')),
        status varchar(255) not null check (status in ('PENDING','PROCESSING','COMPLETED','FAILED','CANCELLED','REFUNDED')),
        primary key (id)
    )
Hibernate: 
    create table payments (
        amount numeric(12,2) not null,
        credit_card_last4 varchar(4),
        due_date date,
        confirmed_date timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        original_payment_id bigint,
        payment_date timestamp(6),
        policy_id bigint not null,
        processed_at timestamp(6),
        processed_by bigint,
        updated_at timestamp(6),
        version bigint,
        bank_code varchar(10),
        account_number varchar(20),
        bank_account_number varchar(20),
        payment_reference varchar(50) not null unique,
        promptpay_ref varchar(50),
        bank_name varchar(100),
        credit_card_holder_name varchar(100),
        reference_number varchar(100),
        transaction_id varchar(100),
        failure_reason varchar(500),
        promptpay_qr_code varchar(500),
        slip_image_path varchar(500),
        gateway_response varchar(1000),
        notes varchar(1000),
        payment_method varchar(255) not null check (payment_method in ('CREDIT_CARD','DEBIT_CARD','BANK_TRANSFER','PROMPTPAY','QR_CODE','CASH','CHEQUE')),
        payment_type varchar(255) not null check (payment_type in ('PREMIUM','REFUND','CLAIM_SETTLEMENT')),
        status varchar(255) not null check (status in ('PENDING','PROCESSING','COMPLETED','FAILED','CANCELLED','REFUNDED')),
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table policies (
        agent_commission numeric(10,2),
        cancelled_date date,
        deductible numeric(10,2),
        discount_amount numeric(10,2),
        discount_percentage numeric(5,2),
        end_date date not null,
        issued_date date,
        premium_amount numeric(12,2) not null,
        start_date date not null,
        sum_insured numeric(12,2),
        tax_amount numeric(10,2),
        total_amount numeric(12,2),
        agent_id bigint,
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        vehicle_id bigint not null,
        version bigint,
        policy_number varchar(50) not null unique,
        cancellation_reason varchar(500),
        remarks varchar(1000),
        coverage_type varchar(255) not null check (coverage_type in ('THIRD_PARTY_ONLY','THIRD_PARTY_FIRE_THEFT','COMPREHENSIVE')),
        policy_type varchar(255) not null check (policy_type in ('CMI','VOLUNTARY')),
        status varchar(255) not null check (status in ('DRAFT','QUOTED','ACTIVE','EXPIRED','CANCELLED','SUSPENDED')),
        primary key (id)
    )
Hibernate: 
    create table policies (
        agent_commission numeric(10,2),
        cancelled_date date,
        deductible numeric(10,2),
        discount_amount numeric(10,2),
        discount_percentage numeric(5,2),
        end_date date not null,
        issued_date date,
        premium_amount numeric(12,2) not null,
        start_date date not null,
        sum_insured numeric(12,2),
        tax_amount numeric(10,2),
        total_amount numeric(12,2),
        agent_id bigint,
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        vehicle_id bigint not null,
        version bigint,
        policy_number varchar(50) not null unique,
        cancellation_reason varchar(500),
        remarks varchar(1000),
        coverage_type varchar(255) not null check (coverage_type in ('THIRD_PARTY_ONLY','THIRD_PARTY_FIRE_THEFT','COMPREHENSIVE')),
        policy_type varchar(255) not null check (policy_type in ('CMI','VOLUNTARY')),
        status varchar(255) not null check (status in ('DRAFT','QUOTED','ACTIVE','EXPIRED','CANCELLED','SUSPENDED')),
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table users (
        account_locked boolean not null,
        email_verified boolean not null,
        failed_login_attempts integer not null,
        is_active boolean not null,
        password_change_required boolean not null,
        phone_verified boolean not null,
        account_locked_at timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login timestamp(6),
        password_changed_at timestamp(6),
        password_reset_token_expiry timestamp(6),
        updated_at timestamp(6),
        version bigint,
        phone_number varchar(20),
        first_name varchar(100),
        last_name varchar(100),
        email varchar(255) not null unique,
        email_verification_token varchar(255),
        password varchar(255) not null,
        password_reset_token varchar(255),
        role varchar(255) not null check (role in ('CUSTOMER','AGENT','ADMIN','UNDERWRITER','CLAIMS_ADJUSTER')),
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table users (
        account_locked boolean not null,
        email_verified boolean not null,
        failed_login_attempts integer not null,
        is_active boolean not null,
        password_change_required boolean not null,
        phone_verified boolean not null,
        account_locked_at timestamp(6),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login timestamp(6),
        password_changed_at timestamp(6),
        password_reset_token_expiry timestamp(6),
        updated_at timestamp(6),
        version bigint,
        phone_number varchar(20),
        first_name varchar(100),
        last_name varchar(100),
        email varchar(255) not null unique,
        email_verification_token varchar(255),
        password varchar(255) not null,
        password_reset_token varchar(255),
        role varchar(255) not null check (role in ('CUSTOMER','AGENT','ADMIN','UNDERWRITER','CLAIMS_ADJUSTER')),
        username varchar(255) not null unique,
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create table vehicles (
        annual_mileage integer,
        current_mileage integer,
        engine_size float(53),
        inactive_date date,
        is_active boolean not null,
        last_transfer_date date,
        manufacture_year integer not null,
        market_value float(53),
        registration_date date,
        seating_capacity integer,
        weight float(53),
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        owner_id bigint,
        updated_at timestamp(6),
        version bigint,
        license_plate varchar(10) not null unique,
        color varchar(30),
        chassis_number varchar(50) not null unique,
        engine_number varchar(50) not null,
        make varchar(50) not null,
        model varchar(50) not null,
        registration_province varchar(100),
        fuel_type varchar(255) check (fuel_type in ('GASOLINE','DIESEL','HYBRID','ELECTRIC','CNG','LPG')),
        inactive_reason varchar(255),
        modifications TEXT,
        status varchar(255) check (status in ('ACTIVE','INACTIVE','SUSPENDED','SCRAPPED')),
        usage_type varchar(255) not null check (usage_type in ('PRIVATE','COMMERCIAL','TAXI','RENTAL','GOVERNMENT')),
        vehicle_type varchar(255) not null check (vehicle_type in ('SEDAN','HATCHBACK','SUV','PICKUP','MOTORCYCLE','VAN','TRUCK','BUS','PERSONAL_CAR','OTHER')),
        primary key (id)
    )
Hibernate: 
    create table vehicles (
        annual_mileage integer,
        current_mileage integer,
        engine_size float(53),
        inactive_date date,
        is_active boolean not null,
        last_transfer_date date,
        manufacture_year integer not null,
        market_value float(53),
        registration_date date,
        seating_capacity integer,
        weight float(53),
        created_at timestamp(6) not null,
        customer_id bigint not null,
        id bigint generated by default as identity,
        owner_id bigint,
        updated_at timestamp(6),
        version bigint,
        license_plate varchar(10) not null unique,
        color varchar(30),
        chassis_number varchar(50) not null unique,
        engine_number varchar(50) not null,
        make varchar(50) not null,
        model varchar(50) not null,
        registration_province varchar(100),
        fuel_type varchar(255) check (fuel_type in ('GASOLINE','DIESEL','HYBRID','ELECTRIC','CNG','LPG')),
        inactive_reason varchar(255),
        modifications TEXT,
        status varchar(255) check (status in ('ACTIVE','INACTIVE','SUSPENDED','SCRAPPED')),
        usage_type varchar(255) not null check (usage_type in ('PRIVATE','COMMERCIAL','TAXI','RENTAL','GOVERNMENT')),
        vehicle_type varchar(255) not null check (vehicle_type in ('SEDAN','HATCHBACK','SUV','PICKUP','MOTORCYCLE','VAN','TRUCK','BUS','PERSONAL_CAR','OTHER')),
        primary key (id)
    )
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claim_documents_claim 
       on claim_documents (claim_id)
Hibernate: 
    create index idx_claim_documents_claim 
       on claim_documents (claim_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claim_documents_type 
       on claim_documents (document_type)
Hibernate: 
    create index idx_claim_documents_type 
       on claim_documents (document_type)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claims_number 
       on claims (claim_number)
Hibernate: 
    create index idx_claims_number 
       on claims (claim_number)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claims_policy 
       on claims (policy_id)
Hibernate: 
    create index idx_claims_policy 
       on claims (policy_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claims_status 
       on claims (status)
Hibernate: 
    create index idx_claims_status 
       on claims (status)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_claims_incident_date 
       on claims (incident_date)
Hibernate: 
    create index idx_claims_incident_date 
       on claims (incident_date)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_customers_national_id 
       on customers (national_id)
Hibernate: 
    create index idx_customers_national_id 
       on customers (national_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_customers_email 
       on customers (email)
Hibernate: 
    create index idx_customers_email 
       on customers (email)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_customers_phone 
       on customers (phone_number)
Hibernate: 
    create index idx_customers_phone 
       on customers (phone_number)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_payments_reference 
       on payments (payment_reference)
Hibernate: 
    create index idx_payments_reference 
       on payments (payment_reference)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_payments_policy 
       on payments (policy_id)
Hibernate: 
    create index idx_payments_policy 
       on payments (policy_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_payments_status 
       on payments (status)
Hibernate: 
    create index idx_payments_status 
       on payments (status)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_payments_date 
       on payments (payment_date)
Hibernate: 
    create index idx_payments_date 
       on payments (payment_date)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_policies_number 
       on policies (policy_number)
Hibernate: 
    create index idx_policies_number 
       on policies (policy_number)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_policies_customer 
       on policies (customer_id)
Hibernate: 
    create index idx_policies_customer 
       on policies (customer_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_policies_vehicle 
       on policies (vehicle_id)
Hibernate: 
    create index idx_policies_vehicle 
       on policies (vehicle_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_policies_status 
       on policies (status)
Hibernate: 
    create index idx_policies_status 
       on policies (status)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_policies_expiry 
       on policies (end_date)
Hibernate: 
    create index idx_policies_expiry 
       on policies (end_date)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_users_email 
       on users (email)
Hibernate: 
    create index idx_users_email 
       on users (email)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_users_username 
       on users (username)
Hibernate: 
    create index idx_users_username 
       on users (username)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_vehicles_license_plate 
       on vehicles (license_plate)
Hibernate: 
    create index idx_vehicles_license_plate 
       on vehicles (license_plate)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_vehicles_chassis_number 
       on vehicles (chassis_number)
Hibernate: 
    create index idx_vehicles_chassis_number 
       on vehicles (chassis_number)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_vehicles_customer 
       on vehicles (customer_id)
Hibernate: 
    create index idx_vehicles_customer 
       on vehicles (customer_id)
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists claim_documents 
       add constraint FK1wmywqj1uideimwd7pdc8rxh4 
       foreign key (claim_id) 
       references claims
Hibernate: 
    alter table if exists claim_documents 
       add constraint FK1wmywqj1uideimwd7pdc8rxh4 
       foreign key (claim_id) 
       references claims
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists claim_documents 
       add constraint FKlqa54r9hf4vkyuo5k1a84516u 
       foreign key (uploaded_by) 
       references users
Hibernate: 
    alter table if exists claim_documents 
       add constraint FKlqa54r9hf4vkyuo5k1a84516u 
       foreign key (uploaded_by) 
       references users
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists claims 
       add constraint FK4bc43n0epx786gpsdnguapckc 
       foreign key (adjuster_id) 
       references users
Hibernate: 
    alter table if exists claims 
       add constraint FK4bc43n0epx786gpsdnguapckc 
       foreign key (adjuster_id) 
       references users
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists claims 
       add constraint FKm0w2xffwe13pmkusoxnxuim7j 
       foreign key (policy_id) 
       references policies
Hibernate: 
    alter table if exists claims 
       add constraint FKm0w2xffwe13pmkusoxnxuim7j 
       foreign key (policy_id) 
       references policies
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists customers 
       add constraint FKrh1g1a20omjmn6kurd35o3eit 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists customers 
       add constraint FKrh1g1a20omjmn6kurd35o3eit 
       foreign key (user_id) 
       references users
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKp43c4k8cbult39sht46l07hu2 
       foreign key (original_payment_id) 
       references payments
Hibernate: 
    alter table if exists payments 
       add constraint FKp43c4k8cbult39sht46l07hu2 
       foreign key (original_payment_id) 
       references payments
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKlemj5kqcn9p31xx0qbpwu3p3l 
       foreign key (policy_id) 
       references policies
Hibernate: 
    alter table if exists payments 
       add constraint FKlemj5kqcn9p31xx0qbpwu3p3l 
       foreign key (policy_id) 
       references policies
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists payments 
       add constraint FKfgfu68uhociwy0tbdggx8ts04 
       foreign key (processed_by) 
       references users
Hibernate: 
    alter table if exists payments 
       add constraint FKfgfu68uhociwy0tbdggx8ts04 
       foreign key (processed_by) 
       references users
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists policies 
       add constraint FK6xqki2lfeu8con7kvrmlvaw8v 
       foreign key (agent_id) 
       references users
Hibernate: 
    alter table if exists policies 
       add constraint FK6xqki2lfeu8con7kvrmlvaw8v 
       foreign key (agent_id) 
       references users
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists policies 
       add constraint FKkgwmqadssjki9pv5e7cjofc2w 
       foreign key (customer_id) 
       references customers
Hibernate: 
    alter table if exists policies 
       add constraint FKkgwmqadssjki9pv5e7cjofc2w 
       foreign key (customer_id) 
       references customers
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists policies 
       add constraint FKg9h4l7845s9gk38bnqnsauvkm 
       foreign key (vehicle_id) 
       references vehicles
Hibernate: 
    alter table if exists policies 
       add constraint FKg9h4l7845s9gk38bnqnsauvkm 
       foreign key (vehicle_id) 
       references vehicles
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists vehicles 
       add constraint FKjrosretvs9ih5ybhpsd5qskc3 
       foreign key (customer_id) 
       references customers
Hibernate: 
    alter table if exists vehicles 
       add constraint FKjrosretvs9ih5ybhpsd5qskc3 
       foreign key (customer_id) 
       references customers
2025-08-26 00:41:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists vehicles 
       add constraint FKhd5suf7ljmeh8vapwsfu7b46s 
       foreign key (owner_id) 
       references customers
Hibernate: 
    alter table if exists vehicles 
       add constraint FKhd5suf7ljmeh8vapwsfu7b46s 
       foreign key (owner_id) 
       references customers
2025-08-26 00:41:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-26 00:41:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-26 00:41:03 [main] DEBUG c.t.a.s.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-08-26 00:41:03 [main] DEBUG o.s.w.f.ServerHttpObservationFilter - Filter 'webMvcObservationFilter' configured for use
2025-08-26 00:41:03 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reportController': Unsatisfied dependency expressed through field 'reportService': Error creating bean with name 'reportService': Unsatisfied dependency expressed through field 'claimRepository': Error creating bean with name 'claimRepository' defined in com.thaiinsurance.autoinsurance.repository.ClaimRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate); Reason: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
2025-08-26 00:41:03 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists claim_documents cascade 
Hibernate: 
    drop table if exists claim_documents cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists claims cascade 
Hibernate: 
    drop table if exists claims cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists customers cascade 
Hibernate: 
    drop table if exists customers cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists payments cascade 
Hibernate: 
    drop table if exists payments cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists policies cascade 
Hibernate: 
    drop table if exists policies cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
2025-08-26 00:41:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists vehicles cascade 
Hibernate: 
    drop table if exists vehicles cascade 
2025-08-26 00:41:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-08-26 00:41:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-08-26 00:41:03 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-08-26 00:41:03 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-08-26 00:41:03 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reportController': Unsatisfied dependency expressed through field 'reportService': Error creating bean with name 'reportService': Unsatisfied dependency expressed through field 'claimRepository': Error creating bean with name 'claimRepository' defined in com.thaiinsurance.autoinsurance.repository.ClaimRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate); Reason: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:772)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.thaiinsurance.autoinsurance.ThaiAutoInsuranceApplication.main(ThaiAutoInsuranceApplication.java:16)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:91)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:53)
	at org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:58)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'reportService': Unsatisfied dependency expressed through field 'claimRepository': Error creating bean with name 'claimRepository' defined in com.thaiinsurance.autoinsurance.repository.ClaimRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate); Reason: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:772)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	... 25 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'claimRepository' defined in com.thaiinsurance.autoinsurance.repository.ClaimRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate); Reason: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1775)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	... 39 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate); Reason: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1822)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1771)
	... 49 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract java.lang.Double com.thaiinsurance.autoinsurance.repository.ClaimRepository.getAverageSettlementDays(java.time.LocalDate,java.time.LocalDate)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 61 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.sqm.produce.function.FunctionArgumentException: Function timestampdiff() has 3 parameters, but 2 arguments given
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:802)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:707)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:132)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:360)
	at jdk.proxy2/jdk.proxy2.$Proxy171.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 67 common frames omitted
Caused by: org.hibernate.query.sqm.produce.function.FunctionArgumentException: Function timestampdiff() has 3 parameters, but 2 arguments given
	at org.hibernate.query.sqm.produce.function.StandardArgumentsValidators$4.validate(StandardArgumentsValidators.java:114)
	at org.hibernate.query.sqm.produce.function.ArgumentTypesValidator.validate(ArgumentTypesValidator.java:91)
	at org.hibernate.query.sqm.function.AbstractSqmFunctionDescriptor.generateSqmExpression(AbstractSqmFunctionDescriptor.java:102)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGenericFunction(SemanticQueryBuilder.java:3843)
	at org.hibernate.grammars.hql.HqlParser$GenericFunctionContext.accept(HqlParser.java:11649)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitFunction(HqlParserBaseVisitor.java:1287)
	at org.hibernate.grammars.hql.HqlParser$FunctionContext.accept(HqlParser.java:11424)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitFunctionExpression(SemanticQueryBuilder.java:1786)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitFunctionExpression(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$FunctionExpressionContext.accept(HqlParser.java:7457)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitBarePrimaryExpression(HqlParserBaseVisitor.java:755)
	at org.hibernate.grammars.hql.HqlParser$BarePrimaryExpressionContext.accept(HqlParser.java:7045)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitExpressionOrPredicate(HqlParserBaseVisitor.java:895)
	at org.hibernate.grammars.hql.HqlParser$ExpressionOrPredicateContext.accept(HqlParser.java:7794)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitFinalFunctionArgument(SemanticQueryBuilder.java:4050)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGenericFunctionArguments(SemanticQueryBuilder.java:4027)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGenericFunctionArguments(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$GenericFunctionArgumentsContext.accept(HqlParser.java:12013)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.getFunctionArguments(SemanticQueryBuilder.java:3930)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGenericFunction(SemanticQueryBuilder.java:3809)
	at org.hibernate.grammars.hql.HqlParser$GenericFunctionContext.accept(HqlParser.java:11649)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitFunction(HqlParserBaseVisitor.java:1287)
	at org.hibernate.grammars.hql.HqlParser$FunctionContext.accept(HqlParser.java:11424)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitFunctionExpression(SemanticQueryBuilder.java:1786)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitFunctionExpression(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$FunctionExpressionContext.accept(HqlParser.java:7457)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitBarePrimaryExpression(HqlParserBaseVisitor.java:755)
	at org.hibernate.grammars.hql.HqlParser$BarePrimaryExpressionContext.accept(HqlParser.java:7045)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitExpressionOrPredicate(HqlParserBaseVisitor.java:895)
	at org.hibernate.grammars.hql.HqlParser$ExpressionOrPredicateContext.accept(HqlParser.java:7794)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectableNode(SemanticQueryBuilder.java:1331)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelection(SemanticQueryBuilder.java:1308)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectClause(SemanticQueryBuilder.java:1301)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuery(SemanticQueryBuilder.java:1153)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:940)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$QuerySpecExpressionContext.accept(HqlParser.java:1844)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:925)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:268)
	at org.hibernate.grammars.hql.HqlParser$SimpleQueryGroupContext.accept(HqlParser.java:1718)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectStatement(SemanticQueryBuilder.java:442)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitStatement(SemanticQueryBuilder.java:401)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.buildSemanticModel(SemanticQueryBuilder.java:310)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:71)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:744)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:794)
	... 74 common frames omitted
